{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"source/medias/banner/17.jpg","path":"medias/banner/17.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"source/medias/banner/12.jpg","path":"medias/banner/12.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/15.jpg","path":"medias/banner/15.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/18.jpg","path":"medias/banner/18.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/8.jpg","path":"medias/banner/8.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/9.jpg","path":"medias/banner/9.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/10.jpg","path":"medias/banner/10.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/11.jpg","path":"medias/banner/11.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/13.jpg","path":"medias/banner/13.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/14.jpg","path":"medias/banner/14.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/16.jpg","path":"medias/banner/16.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":0,"renderable":1},{"_id":"source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1547734409046},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"4a2a6458bff8e7bb491495a76cba9d1ed7a29fc5","modified":1548084361784},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"b02249657c64f51635775e381c06d6dc8c8e6e95","modified":1547734409046},{"_id":"themes/hexo-theme-matery/README.md","hash":"ac08c9fb83ab1ee61a7fcf3be00071706b979ad4","modified":1547734409046},{"_id":"source/_data/friends.json","hash":"640caf191b65a9faf99d943f71c27a9a29e094ba","modified":1547737372787},{"_id":"source/about/index.md","hash":"5606c1407c2395f27319334ffc0573b73f24e3f5","modified":1547736433603},{"_id":"source/categories/index.md","hash":"77fb355315ca20d439fa9a9e6cb3ced1576731b7","modified":1547736342804},{"_id":"source/friends/index.md","hash":"d7e7f2d73cb839da5c8d9d038f094ccd88dc9650","modified":1547736462978},{"_id":"source/tags/index.md","hash":"78b9966192a7cc8f676b66ef1f83c09b337af7c9","modified":1547736380500},{"_id":"source/_posts/Source.md","hash":"8a16118450c9253485eaacbb81416156f07fe6c8","modified":1547966432484},{"_id":"source/_posts/QuickSort.md","hash":"32b3607888f2c4567a318786119d4731d8303af2","modified":1547967607565},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"b3c6e50c1caa6d8af0ebf815a1894de927e1fe79","modified":1547734409046},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"5c4d45dfaa8408174bb58d0b1872ffbf52331e84","modified":1547734409046},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"0a8942e2fa070d7d08ef0779267e1e05ff8e3065","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"76bbb94fd35870699b7a9741b2eafd2df4275506","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"2a414afa71f94edba24851c0732c884d1f163f13","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"b5ebe0ce1f08e6c5f417a55a6e98c728d35019c1","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e4a9d2892dcce4b599c6c0a253caf10e4d0f9cd6","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"6e09402569e8e4bd15c7a3ab786b190e5b759409","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"caa7f0c717560423e7e993cf2d6952b450139f75","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"c9589d0e192910550decfcf962c896aca7254db5","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"f59d3d45a339e330784c0e060bb02fc7f13da8b7","modified":1548086396825},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"023d6f717390452d6de4a1da8797b8891a591e5e","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2f2f19ff29862ce056f2ed909f0f0b6b57b4c0bb","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"27952311e17475ae5ce4d8d462458bcbac3bf620","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"b05d20668c396116b7375ed469e2c62860722ba6","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"a873099c04cc18476dabd0e39639b10793fc2142","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"c8583c296876d422a7d5ebba692460610da215e7","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"f7271dd1eb8f4fd29cc49f8f226de0b9b797e74a","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"2fa40dc53312c76e6a20ae107cb4188b653eac47","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"db61739b1ae4e1487abd808ee2dedb848d678486","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"2d72c5c2da3ae1bccd3ed5f2e691c9fc0d224e75","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"e20f68a0e099b9467ffdfbc187ece212fecef4eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"06493fc4f3b256dd67b8399d929fa80d29de1486","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"8671cff27aef7298b2518dd57fe0671959f21701","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"607762f39cc6bed5e86c514979bfdd96861daee8","modified":1548085634388},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"319587adc3a46518077af68e3558cd9c4b2d61eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f166abe86d5e4279758d48b8a6827f58c0facaaa","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"441f5a685350d0a765a01596de20bcf74a52a763","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"c7a1e65b4a75ecdbf460ea1b4fe0643fd47ec1eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"66666b851899ac0c7088f3612b993268e5cf5464","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"7bb46650940dc7265a9331536b722754d1d3d53a","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"47730e36f2694c976838dd59d982e021743ca8c7","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"6d40e0107499dd280e5b8bc6b433a41057ce2390","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"468a8419f2af3baff2dda2e3fab9461804a75a32","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"0afac0d330db3053c22b3082c299aa0d8c9b1c7a","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"c08f0c4d43da6c4632f31f96d3885754298bba32","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"14872a6ab2a4492376bc086366754c9a1af25ff7","modified":1548087077006},{"_id":"source/medias/banner/0.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547811739379},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1547734409186},{"_id":"source/medias/banner/17.jpg","hash":"9549c6072b3d4232b1a7c6e1e06dc641e30a291b","modified":1547811739547},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6979c760beb550b681a06a8f11688f2d1591a70e","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1547734409166},{"_id":"source/medias/banner/12.jpg","hash":"3d751670fd5933392f07763e5acceafd454eaf9d","modified":1547811739448},{"_id":"source/medias/banner/15.jpg","hash":"865d101a4a03255f3295d4019be050d514058569","modified":1547811739515},{"_id":"source/medias/banner/18.jpg","hash":"7096f48ecf0f99491ca0cd7f8b280f47765e6c15","modified":1547811739584},{"_id":"source/medias/banner/2.jpg","hash":"d78cde78349b6dbbaf19be760e978bcf4597b481","modified":1543582763351},{"_id":"source/medias/banner/6.jpg","hash":"de576214450e7a85812620f3a1f9832f204f1293","modified":1543582615702},{"_id":"source/medias/banner/7.jpg","hash":"b10a065f246a3cb09b4afe41fd97bf0d970cf4df","modified":1543582456949},{"_id":"source/medias/banner/8.jpg","hash":"67b4fa23b3ee9e624e02f304da39b81a652c998e","modified":1547811739623},{"_id":"source/medias/banner/9.jpg","hash":"2babc0df32efe4f1149d200c558e3af476cb638a","modified":1547811739639},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"9d5dd7e092c8eaf6266e2498cff72e6c98790a05","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1547734409116},{"_id":"source/medias/banner/1.jpg","hash":"d52b83474c37e60c240174b9c1c02ac03e1f9e00","modified":1543582550389},{"_id":"source/medias/banner/10.jpg","hash":"439577de1e3dc86ae937074bb47daa9b2c44cbbb","modified":1547811739406},{"_id":"source/medias/banner/11.jpg","hash":"8052f2a2a230c7452e957b5a107b17c0f6d8167b","modified":1547811739422},{"_id":"source/medias/banner/13.jpg","hash":"3d42593a39bf36b72e8ba22722dd136be6574c84","modified":1547811739462},{"_id":"source/medias/banner/14.jpg","hash":"8c581b44d2538053eb502a954644e4f3c031b45b","modified":1547811739497},{"_id":"source/medias/banner/16.jpg","hash":"d692b0a4fb37f11a4388ceb600adfeb427d182f9","modified":1547811739545},{"_id":"source/medias/banner/3.jpg","hash":"6ca7ae198a3f44e53fd09784d22ecfdff9c6db61","modified":1543582612959},{"_id":"source/medias/banner/5.jpg","hash":"05a5621415a1ac2a19d09bc2e0deefd121cacb92","modified":1543582777226},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","hash":"4eaae73c0c2e342523d391057945e3c366020e3e","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"b7085b5c1dc3f56f81a8bf93290e2a3f24e4d8ed","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","hash":"338a96318e7c9452cec509fcf8dea1511db660b2","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"c5ff32ccf63106152dac687395d2e3551d9fcadb","modified":1547734409126},{"_id":"source/medias/banner/4.jpg","hash":"ee02c016e1dd8367edcf4ac9d65818b26d484c3d","modified":1500794617709},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1547734409106}],"Category":[{"name":"springMVC","_id":"cjr6ix1820003n8tvbz6ba1pl"},{"name":"算法","_id":"cjr6ix19d000cn8tvqitiomhd"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-01-17T14:47:13.603Z","path":"about/index.html","comments":1,"_id":"cjr6ix17s0000n8tvqnwij2l2","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-01-17T14:47:23.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-01-17 22:47:23\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-01-17T14:47:42.978Z","path":"friends/index.html","comments":1,"_id":"cjr6ix1800002n8tvvbi83ayy","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-13T09:42:49.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-13 17:42:49\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-01-17T14:46:20.500Z","path":"tags/index.html","comments":1,"_id":"cjr6ix1840005n8tv0kltj8gk","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-01-17T14:42:08.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-01-17 22:42:08\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-01-17T14:45:42.804Z","path":"categories/index.html","comments":1,"_id":"cjr6ix1850006n8tvj9mvlwb6","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"springMVC 源码自探","date":"2019-01-17T07:28:30.000Z","_content":"## springMVC 源码自探\n\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 弄清楚springMVC对我们写rest接口有莫大的好处\n\n**说明：其实和springMVC绑定在一起的内容还有这些：**\n1. http的知识\n2. 消息转化\n3. 拦截器的实现原理\n4. 其他，如消息监控的植入actuator,zipkin等。","source":"_posts/Source.md","raw":"title: springMVC 源码自探\ndate: 2019-01-17 15:28:30\ntags: [源码, springMVC]\ncategories: [springMVC]\n---\n## springMVC 源码自探\n\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 弄清楚springMVC对我们写rest接口有莫大的好处\n\n**说明：其实和springMVC绑定在一起的内容还有这些：**\n1. http的知识\n2. 消息转化\n3. 拦截器的实现原理\n4. 其他，如消息监控的植入actuator,zipkin等。","slug":"Source","published":1,"updated":"2019-01-20T06:40:32.484Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6ix17t0001n8tvr44je82u","content":"<h2 id=\"springMVC-源码自探\"><a href=\"#springMVC-源码自探\" class=\"headerlink\" title=\"springMVC 源码自探\"></a>springMVC 源码自探</h2><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"弄清楚springMVC对我们写rest接口有莫大的好处\"><a href=\"#弄清楚springMVC对我们写rest接口有莫大的好处\" class=\"headerlink\" title=\"弄清楚springMVC对我们写rest接口有莫大的好处\"></a>弄清楚springMVC对我们写rest接口有莫大的好处</h3><p><strong>说明：其实和springMVC绑定在一起的内容还有这些：</strong></p>\n<ol>\n<li>http的知识</li>\n<li>消息转化</li>\n<li>拦截器的实现原理</li>\n<li>其他，如消息监控的植入actuator,zipkin等。</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"springMVC-源码自探\"><a href=\"#springMVC-源码自探\" class=\"headerlink\" title=\"springMVC 源码自探\"></a>springMVC 源码自探</h2><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"弄清楚springMVC对我们写rest接口有莫大的好处\"><a href=\"#弄清楚springMVC对我们写rest接口有莫大的好处\" class=\"headerlink\" title=\"弄清楚springMVC对我们写rest接口有莫大的好处\"></a>弄清楚springMVC对我们写rest接口有莫大的好处</h3><p><strong>说明：其实和springMVC绑定在一起的内容还有这些：</strong></p>\n<ol>\n<li>http的知识</li>\n<li>消息转化</li>\n<li>拦截器的实现原理</li>\n<li>其他，如消息监控的植入actuator,zipkin等。</li>\n</ol>\n"},{"title":"QuickSort Application in java","date":"2018-11-25T15:07:22.000Z","top":true,"_content":"![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言：\n**对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。\n而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.**\n\n    java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人\n    还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。\n    本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n### 涉及的算法\n1. 插入排序(之前有用binary insertion,既二分法找到插入点后copy)\n2. 归并排序\n3. 快速排序\n    - 单轴双切分快排序(带等号)\n    - 双轴三切分快排\n4. 计数排序(用于数值范围小的情况，byte，short，char类型的时候)\n5. timSort(用于分析本身排序情况)\n\n### 大致思路\n尽量发掘各自单一排序算法自己优势，当有合适使用条件的时候就使用对应的基本排序，中间穿插一些实用的优化：\n1. 小数据量：插入排序\n2. 适中：快速排序\n    - 结合插入排序\n    - 划分区间的时候，带等号使用单轴快排，否则双轴快排\n    - 递归调用自己 \n3. 大量：先分用timSort分析数据本身排序状况，\n    - 衡量指标：run(单调升降序长度)和runs(归并次数)\n    - 满足对应的常量要求就用归并，否则就用快排\n    \n### 具体代码(jdk1.8#对int[]排序)\n``` java\n    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left < QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n    \n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n    \n            for (int k = left; k < right; run[count] = k) {\n                if (a[k] < a[k + 1]) { // \n                    while (++k <= right && a[k - 1] <= a[k]);\n                } else if (a[k] > a[k + 1]) { // 降序\n                    while (++k <= right && a[k - 1] >= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n    \n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n            \n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n```  \n下面是核心快排(有点长)我梳理下：\n1. 小范围的用插入排序结束对应区间的排序，跳过\n2. 切分数组成6个区间（不是等分），中间有五个点，排好序\n3. 判断这五个点有没有相等的\n    - 有：双轴三切分\n      - 前后部分直接递归（转到第一步）\n      - 如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）\n    - 没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）\n      \n```` java\n    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length < INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i < right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai < a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left >= right) {\n                        return;\n                    }\n                } while (a[++left] >= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left <= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 < a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 < a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 < a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last < a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length >> 3) + (length >> 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) >>> 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] < a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] < a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] < a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] < a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t < a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n            \n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] < pivot1);\n            while (a[--great] > pivot2);\n            \n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  < pivot1  |  pivot1 <= && <= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k <= great; ) {\n                int ak = a[k];\n                if (ak < pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak > pivot2) { // Move a[k] to right part\n                    while (a[great] > pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] < pivot1) { // a[great] <= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 <= a[great] <= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less < e1 && e5 < great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 < && < pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k <= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] < pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 < a[great] < pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  < pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k <= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak < pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] > pivot - Move a[k] to right part\n                    while (a[great] > pivot) {\n                        --great;\n                    }\n                    if (a[great] < pivot) { // a[great] <= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n````\n我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。\n### 总结一下\n1. 数据量小(n<47)：使用插入排序\n2. 数据量大(n>286)：且符合归并排序的指标(run<33,runs<67)就用归并\n3. 别的时候都是使用快排递归解决\n\n   \n    ","source":"_posts/QuickSort.md","raw":"title: 'QuickSort Application in java'\ndate: 2018-11-25 23:07:22\ntags: Algorithm\ncategories: [算法]\ntop: true\n---\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言：\n**对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。\n而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.**\n\n    java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人\n    还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。\n    本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n### 涉及的算法\n1. 插入排序(之前有用binary insertion,既二分法找到插入点后copy)\n2. 归并排序\n3. 快速排序\n    - 单轴双切分快排序(带等号)\n    - 双轴三切分快排\n4. 计数排序(用于数值范围小的情况，byte，short，char类型的时候)\n5. timSort(用于分析本身排序情况)\n\n### 大致思路\n尽量发掘各自单一排序算法自己优势，当有合适使用条件的时候就使用对应的基本排序，中间穿插一些实用的优化：\n1. 小数据量：插入排序\n2. 适中：快速排序\n    - 结合插入排序\n    - 划分区间的时候，带等号使用单轴快排，否则双轴快排\n    - 递归调用自己 \n3. 大量：先分用timSort分析数据本身排序状况，\n    - 衡量指标：run(单调升降序长度)和runs(归并次数)\n    - 满足对应的常量要求就用归并，否则就用快排\n    \n### 具体代码(jdk1.8#对int[]排序)\n``` java\n    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left < QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n    \n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n    \n            for (int k = left; k < right; run[count] = k) {\n                if (a[k] < a[k + 1]) { // \n                    while (++k <= right && a[k - 1] <= a[k]);\n                } else if (a[k] > a[k + 1]) { // 降序\n                    while (++k <= right && a[k - 1] >= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n    \n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n            \n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n```  \n下面是核心快排(有点长)我梳理下：\n1. 小范围的用插入排序结束对应区间的排序，跳过\n2. 切分数组成6个区间（不是等分），中间有五个点，排好序\n3. 判断这五个点有没有相等的\n    - 有：双轴三切分\n      - 前后部分直接递归（转到第一步）\n      - 如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）\n    - 没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）\n      \n```` java\n    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length < INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i < right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai < a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left >= right) {\n                        return;\n                    }\n                } while (a[++left] >= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left <= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 < a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 < a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 < a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last < a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length >> 3) + (length >> 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) >>> 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] < a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] < a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] < a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] < a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t < a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n            \n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] < pivot1);\n            while (a[--great] > pivot2);\n            \n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  < pivot1  |  pivot1 <= && <= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k <= great; ) {\n                int ak = a[k];\n                if (ak < pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak > pivot2) { // Move a[k] to right part\n                    while (a[great] > pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] < pivot1) { // a[great] <= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 <= a[great] <= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less < e1 && e5 < great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 < && < pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k <= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] < pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 < a[great] < pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  < pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k <= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak < pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] > pivot - Move a[k] to right part\n                    while (a[great] > pivot) {\n                        --great;\n                    }\n                    if (a[great] < pivot) { // a[great] <= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n````\n我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。\n### 总结一下\n1. 数据量小(n<47)：使用插入排序\n2. 数据量大(n>286)：且符合归并排序的指标(run<33,runs<67)就用归并\n3. 别的时候都是使用快排递归解决\n\n   \n    ","slug":"QuickSort","published":1,"updated":"2019-01-20T07:00:07.565Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjr6ix19c000bn8tvigbq0blq","content":"<p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。<br>而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.</strong></p>\n<pre><code>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人\n还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。\n本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n</code></pre><h3 id=\"涉及的算法\"><a href=\"#涉及的算法\" class=\"headerlink\" title=\"涉及的算法\"></a>涉及的算法</h3><ol>\n<li>插入排序(之前有用binary insertion,既二分法找到插入点后copy)</li>\n<li>归并排序</li>\n<li>快速排序<ul>\n<li>单轴双切分快排序(带等号)</li>\n<li>双轴三切分快排</li>\n</ul>\n</li>\n<li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li>\n<li>timSort(用于分析本身排序情况)</li>\n</ol>\n<h3 id=\"大致思路\"><a href=\"#大致思路\" class=\"headerlink\" title=\"大致思路\"></a>大致思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适使用条件的时候就使用对应的基本排序，中间穿插一些实用的优化：</p>\n<ol>\n<li>小数据量：插入排序</li>\n<li>适中：快速排序<ul>\n<li>结合插入排序</li>\n<li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li>\n<li>递归调用自己 </li>\n</ul>\n</li>\n<li>大量：先分用timSort分析数据本身排序状况，<ul>\n<li>衡量指标：run(单调升降序长度)和runs(归并次数)</li>\n<li>满足对应的常量要求就用归并，否则就用快排</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码-jdk1-8-对int-排序\"><a href=\"#具体代码-jdk1-8-对int-排序\" class=\"headerlink\" title=\"具体代码(jdk1.8#对int[]排序)\"></a>具体代码(jdk1.8#对int[]排序)</h3><pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span>\n                         <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> workBase<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> workLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 对于数据量少的直接使用快排</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> QUICKSORT_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 286</span>\n                <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 基于插入，单双轴的快排见下面</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> run <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>MAX_RUN_COUNT <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> run<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">;</span> run<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// </span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 降序</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lo <span class=\"token operator\">=</span> run<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>lo <span class=\"token operator\">&lt;</span> <span class=\"token operator\">--</span>hi<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 相等</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> MAX_RUN_LENGTH<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 等号多了直接将这里短丢到快排里面</span>\n                            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count <span class=\"token operator\">==</span> MAX_RUN_COUNT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 目前MAX_RUN_COUNT = 67</span>\n                    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 基于插入，单双轴的快排见下面</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ...... 归并</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 结束</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面是核心快排(有点长)我梳理下：</p>\n<ol>\n<li>小范围的用插入排序结束对应区间的排序，跳过</li>\n<li>切分数组成6个区间（不是等分），中间有五个点，排好序</li>\n<li>判断这五个点有没有相等的<ul>\n<li>有：双轴三切分<ul>\n<li>前后部分直接递归（转到第一步）</li>\n<li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li>\n</ul>\n</li>\n<li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> leftmost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用插入排序</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> INSERTION_SORT_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// INSERTION_SORT_THRESHOLD = 47</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 左边是否是最大</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftmost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 普通的插入排序</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> ai <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ai <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ai<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 * 跳过最长升序\n                 */</span>\n                <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">[</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> k <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">&lt;</span> a2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span> a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    a<span class=\"token punctuation\">[</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                a<span class=\"token punctuation\">[</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1</span>\n        <span class=\"token keyword\">int</span> seventh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 各个等分点</span>\n        <span class=\"token keyword\">int</span> e3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The midpoint</span>\n        <span class=\"token keyword\">int</span> e2 <span class=\"token operator\">=</span> e3 <span class=\"token operator\">-</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e1 <span class=\"token operator\">=</span> e2 <span class=\"token operator\">-</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e4 <span class=\"token operator\">=</span> e3 <span class=\"token operator\">+</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e5 <span class=\"token operator\">=</span> e4 <span class=\"token operator\">+</span> seventh<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 用插入排序将这些点快速排好序</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Pointers</span>\n        <span class=\"token keyword\">int</span> less  <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// The index of the first element of center part</span>\n        <span class=\"token keyword\">int</span> great <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The index before the first element of right part</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 取第二和第四点为轴</span>\n            <span class=\"token keyword\">int</span> pivot1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pivot2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 找到开始和结束向中间靠拢的合适下标</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 双轴三切分排序</span>\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */</span>\n            outer<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                    a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to right part</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>great<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt;= pivot2</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// pivot1 &lt;= a[great] &lt;= pivot2</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// Swap pivots into their final positions</span>\n            a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less  <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>less  <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot1<span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot2<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 前后切分，递归</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> less <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> leftmost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> great <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/* \n             * 如果中间长度大于 length 4/7 的长度\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>less <span class=\"token operator\">&lt;</span> e1 <span class=\"token operator\">&amp;&amp;</span> e5 <span class=\"token operator\">&lt;</span> great<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */</span>\n                outer<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to right part</span>\n                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>great<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt; pivot2</span>\n                            a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot1<span class=\"token punctuation\">;</span>\n                            <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// pivot1 &lt; a[great] &lt; pivot2</span>\n                            a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 中间递归</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> less<span class=\"token punctuation\">,</span> great<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 单轴快排</span>\n            <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  &lt; pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                    a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[k] > pivot - Move a[k] to right part</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt;= pivot</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] == pivot</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             * 双切分，递归\n             */</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> leftmost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ol>\n<li>数据量小(n&lt;47)：使用插入排序</li>\n<li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li>\n<li>别的时候都是使用快排递归解决</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。<br>而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.</strong></p>\n<pre><code>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人\n还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。\n本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n</code></pre><h3 id=\"涉及的算法\"><a href=\"#涉及的算法\" class=\"headerlink\" title=\"涉及的算法\"></a>涉及的算法</h3><ol>\n<li>插入排序(之前有用binary insertion,既二分法找到插入点后copy)</li>\n<li>归并排序</li>\n<li>快速排序<ul>\n<li>单轴双切分快排序(带等号)</li>\n<li>双轴三切分快排</li>\n</ul>\n</li>\n<li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li>\n<li>timSort(用于分析本身排序情况)</li>\n</ol>\n<h3 id=\"大致思路\"><a href=\"#大致思路\" class=\"headerlink\" title=\"大致思路\"></a>大致思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适使用条件的时候就使用对应的基本排序，中间穿插一些实用的优化：</p>\n<ol>\n<li>小数据量：插入排序</li>\n<li>适中：快速排序<ul>\n<li>结合插入排序</li>\n<li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li>\n<li>递归调用自己 </li>\n</ul>\n</li>\n<li>大量：先分用timSort分析数据本身排序状况，<ul>\n<li>衡量指标：run(单调升降序长度)和runs(归并次数)</li>\n<li>满足对应的常量要求就用归并，否则就用快排</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码-jdk1-8-对int-排序\"><a href=\"#具体代码-jdk1-8-对int-排序\" class=\"headerlink\" title=\"具体代码(jdk1.8#对int[]排序)\"></a>具体代码(jdk1.8#对int[]排序)</h3><pre><code class=\"java\">    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left &lt; QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n\n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n\n            for (int k = left; k &lt; right; run[count] = k) {\n                if (a[k] &lt; a[k + 1]) { // \n                    while (++k &lt;= right &amp;&amp; a[k - 1] &lt;= a[k]);\n                } else if (a[k] &gt; a[k + 1]) { // 降序\n                    while (++k &lt;= right &amp;&amp; a[k - 1] &gt;= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo &lt; --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n\n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n\n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n</code></pre>\n<p>下面是核心快排(有点长)我梳理下：</p>\n<ol>\n<li>小范围的用插入排序结束对应区间的排序，跳过</li>\n<li>切分数组成6个区间（不是等分），中间有五个点，排好序</li>\n<li>判断这五个点有没有相等的<ul>\n<li>有：双轴三切分<ul>\n<li>前后部分直接递归（转到第一步）</li>\n<li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li>\n</ul>\n</li>\n<li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length &lt; INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i &lt; right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai &lt; a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left &gt;= right) {\n                        return;\n                    }\n                } while (a[++left] &gt;= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left &lt;= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 &lt; a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 &lt; a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 &lt; a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last &lt; a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length &gt;&gt; 3) + (length &gt;&gt; 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) &gt;&gt;&gt; 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] &lt; a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] &lt; a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] &lt; a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] &lt; a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t &lt; a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n\n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] &lt; pivot1);\n            while (a[--great] &gt; pivot2);\n\n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k &lt;= great; ) {\n                int ak = a[k];\n                if (ak &lt; pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak &gt; pivot2) { // Move a[k] to right part\n                    while (a[great] &gt; pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] &lt; pivot1) { // a[great] &lt;= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 &lt;= a[great] &lt;= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less &lt; e1 &amp;&amp; e5 &lt; great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k &lt;= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] &lt; pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 &lt; a[great] &lt; pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k &lt;= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak &lt; pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] &gt; pivot - Move a[k] to right part\n                    while (a[great] &gt; pivot) {\n                        --great;\n                    }\n                    if (a[great] &lt; pivot) { // a[great] &lt;= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n</code></pre>\n<p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ol>\n<li>数据量小(n&lt;47)：使用插入排序</li>\n<li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li>\n<li>别的时候都是使用快排递归解决</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjr6ix17t0001n8tvr44je82u","category_id":"cjr6ix1820003n8tvbz6ba1pl","_id":"cjr6ix1860008n8tv8vu8nl23"},{"post_id":"cjr6ix19c000bn8tvigbq0blq","category_id":"cjr6ix19d000cn8tvqitiomhd","_id":"cjr6ix19f000fn8tvlbshg73b"}],"PostTag":[{"post_id":"cjr6ix17t0001n8tvr44je82u","tag_id":"cjr6ix1830004n8tvawmcr80s","_id":"cjr6ix1870009n8tv64ntvs7k"},{"post_id":"cjr6ix17t0001n8tvr44je82u","tag_id":"cjr6ix1860007n8tva4b39125","_id":"cjr6ix187000an8tv02wi29ta"},{"post_id":"cjr6ix19c000bn8tvigbq0blq","tag_id":"cjr6ix19d000dn8tvteb2x4cb","_id":"cjr6ix19e000en8tvg74lwu7j"}],"Tag":[{"name":"源码","_id":"cjr6ix1830004n8tvawmcr80s"},{"name":"springMVC","_id":"cjr6ix1860007n8tva4b39125"},{"name":"Algorithm","_id":"cjr6ix19d000dn8tvteb2x4cb"}]}}