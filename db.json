{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/红黑树插入调整.png","path":"images/红黑树插入调整.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"source/images/红黑树删除修复.png","path":"images/红黑树删除修复.png","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"source/medias/banner/17.jpg","path":"medias/banner/17.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/11.jpg","path":"medias/banner/11.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/13.jpg","path":"medias/banner/13.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/14.jpg","path":"medias/banner/14.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/15.jpg","path":"medias/banner/15.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/10.jpg","path":"medias/banner/10.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/12.jpg","path":"medias/banner/12.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/16.jpg","path":"medias/banner/16.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/18.jpg","path":"medias/banner/18.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/7.jpg","path":"medias/banner/7.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"source/medias/banner/9.jpg","path":"medias/banner/9.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/8.jpg","path":"medias/banner/8.jpg","modified":0,"renderable":0},{"_id":"source/medias/banner/19.jpg","path":"medias/banner/19.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","path":"libs/materialize/js/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","path":"libs/materialize/css/materialize.min.css","modified":0,"renderable":1},{"_id":"source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","path":"libs/materialize/font/material-design-icons/LICENSE.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","path":"libs/materialize/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","path":"libs/materialize/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","path":"libs/materialize/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","path":"libs/materialize/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","path":"libs/materialize/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","path":"libs/materialize/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","path":"libs/materialize/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","path":"libs/materialize/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","path":"libs/materialize/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","path":"libs/materialize/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","path":"libs/materialize/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","path":"libs/materialize/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","path":"libs/materialize/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","path":"libs/materialize/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","path":"libs/materialize/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","path":"libs/materialize/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","path":"libs/materialize/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","path":"libs/materialize/font/material-design-icons/Material-Design-Icons.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","path":"libs/materialize/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","path":"libs/materialize/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","path":"libs/materialize/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"1403b3255973457a8ec76f82d69189e73b592c80","modified":1548512487728},{"_id":"themes/hexo-theme-matery/README.md","hash":"ac08c9fb83ab1ee61a7fcf3be00071706b979ad4","modified":1547734409046},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1547734409046},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"b02249657c64f51635775e381c06d6dc8c8e6e95","modified":1547734409046},{"_id":"source/_data/friends.json","hash":"32b555f522f77443c3fc73920196b5c1e2b58caa","modified":1548254396306},{"_id":"source/about/index.md","hash":"5606c1407c2395f27319334ffc0573b73f24e3f5","modified":1547736433603},{"_id":"source/friends/index.md","hash":"909f362b0fda1f1528afc287abe5b1a33c350d1c","modified":1547773228762},{"_id":"source/categories/index.md","hash":"26fb0490bb05408ba6763a5fd8f9d8fbdf96015d","modified":1547773226853},{"_id":"source/tags/index.md","hash":"78b9966192a7cc8f676b66ef1f83c09b337af7c9","modified":1547736380500},{"_id":"source/images/红黑树插入调整.png","hash":"723e1cf5b1e1c3f40e7a0ab0e4e97c90496e471b","modified":1548512487782},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"aa916f8367e5a7abda518578e117e1fd0f3998eb","modified":1548519299295},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1547734409076},{"_id":"source/_posts/jdk的快速排序.md","hash":"fb6b4ffb0e4c4abab9226597a60d8be81f4e23b6","modified":1548823469885},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"5c4d45dfaa8408174bb58d0b1872ffbf52331e84","modified":1547734409046},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"b3c6e50c1caa6d8af0ebf815a1894de927e1fe79","modified":1547734409046},{"_id":"source/_posts/springMVC源码自探.md","hash":"79a42a8669d7f26f729534452c0e9a2da2d9d3e2","modified":1548512487730},{"_id":"source/images/红黑树删除修复.png","hash":"5094f414c3cbc392b6043cdafe1d708ede18f575","modified":1548512487763},{"_id":"source/_posts/红黑树RBTree在jdk中的实现.md","hash":"154398dfa3839a5a17a219f16db91d3f733f93fd","modified":1548493798327},{"_id":"source/_posts/设计模式-一.md","hash":"84919e2e3797801781ad1ade524c13c0bf2dee85","modified":1548512487742},{"_id":"source/_posts/设计模式-二.md","hash":"eca5a3a24b9d3129f538423c084c89b982bee408","modified":1548512487745},{"_id":"source/_posts/设计模式-三.md","hash":"fa2eda6e0eb14013f0bc712f8e8ec2f6e6857b9c","modified":1548512487744},{"_id":"source/_posts/设计模式-四.md","hash":"9fa962b7424a3d2384adf96fbde255838faf1188","modified":1548315190682},{"_id":"source/_posts/究竟应该怎么实现分布式锁 ？.md","hash":"669f4d1fe3bd4ad0c3dccdd79bf79b08437db0ff","modified":1548512487740},{"_id":"source/_posts/查快改慢B-树-改快查慢LSM树.md","hash":"e2e9c1b8aa775935869199e9d4bc3e6dbd0ddbf1","modified":1548493028671},{"_id":"source/_posts/限流方案对比.md","hash":"65f71166d75e6458cbdbef5cfaca3f9715e8c269","modified":1548217980100},{"_id":"source/_posts/位运算的那些骚操作.md","hash":"6bc9071006b75bacfc8ae1373827ff3254d5b04e","modified":1548824374132},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"d550cc25e4ecf49a99fb05606c2be7315b01a0e0","modified":1550195222009},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"0a8942e2fa070d7d08ef0779267e1e05ff8e3065","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"2a414afa71f94edba24851c0732c884d1f163f13","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"c08f0c4d43da6c4632f31f96d3885754298bba32","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"77ecae23dd3edd8ad962c5b12954652bb2f7a1b6","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"6e09402569e8e4bd15c7a3ab786b190e5b759409","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"caa7f0c717560423e7e993cf2d6952b450139f75","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"c9589d0e192910550decfcf962c896aca7254db5","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1547734409076},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"76bbb94fd35870699b7a9741b2eafd2df4275506","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1547734409156},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"b5ebe0ce1f08e6c5f417a55a6e98c728d35019c1","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"e4a9d2892dcce4b599c6c0a253caf10e4d0f9cd6","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1547734409186},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"f166abe86d5e4279758d48b8a6827f58c0facaaa","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"c7a1e65b4a75ecdbf460ea1b4fe0643fd47ec1eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"66666b851899ac0c7088f3612b993268e5cf5464","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"441f5a685350d0a765a01596de20bcf74a52a763","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"468a8419f2af3baff2dda2e3fab9461804a75a32","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"6d40e0107499dd280e5b8bc6b433a41057ce2390","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"47730e36f2694c976838dd59d982e021743ca8c7","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"7bb46650940dc7265a9331536b722754d1d3d53a","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"0afac0d330db3053c22b3082c299aa0d8c9b1c7a","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1547734409156},{"_id":"source/medias/banner/0.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547811739379},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1547734409186},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1547734409056},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1547734409186},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"023d6f717390452d6de4a1da8797b8891a591e5e","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"f59d3d45a339e330784c0e060bb02fc7f13da8b7","modified":1548163093520},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2f2f19ff29862ce056f2ed909f0f0b6b57b4c0bb","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"27952311e17475ae5ce4d8d462458bcbac3bf620","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"b05d20668c396116b7375ed469e2c62860722ba6","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"a873099c04cc18476dabd0e39639b10793fc2142","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"c8583c296876d422a7d5ebba692460610da215e7","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"2fa40dc53312c76e6a20ae107cb4188b653eac47","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"db61739b1ae4e1487abd808ee2dedb848d678486","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"f7271dd1eb8f4fd29cc49f8f226de0b9b797e74a","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"e20f68a0e099b9467ffdfbc187ece212fecef4eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"06493fc4f3b256dd67b8399d929fa80d29de1486","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"607762f39cc6bed5e86c514979bfdd96861daee8","modified":1548163093520},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"319587adc3a46518077af68e3558cd9c4b2d61eb","modified":1547734409066},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"2d72c5c2da3ae1bccd3ed5f2e691c9fc0d224e75","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1547734409056},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"8671cff27aef7298b2518dd57fe0671959f21701","modified":1547734409066},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1547734409106},{"_id":"source/medias/banner/17.jpg","hash":"9549c6072b3d4232b1a7c6e1e06dc641e30a291b","modified":1547811739547},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6979c760beb550b681a06a8f11688f2d1591a70e","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1547734409176},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1547734409186},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"8d3c8391ff161eec70f66d69e5545a9468cc52ef","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"4a08deec1dd5b4f1490e8fc23adfb75a0f88b0c4","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"c3d5ab183b39a7140941b8375e29498f9d24f343","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"62e9586a8cec91a160f147c424a3d1d1aea360f9","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1547734409106},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1547734409156},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"9d5dd7e092c8eaf6266e2498cff72e6c98790a05","modified":1547734409106},{"_id":"source/medias/banner/1.jpg","hash":"d52b83474c37e60c240174b9c1c02ac03e1f9e00","modified":1543582550389},{"_id":"source/medias/banner/11.jpg","hash":"8052f2a2a230c7452e957b5a107b17c0f6d8167b","modified":1547811739422},{"_id":"source/medias/banner/13.jpg","hash":"3d42593a39bf36b72e8ba22722dd136be6574c84","modified":1547811739462},{"_id":"source/medias/banner/14.jpg","hash":"8c581b44d2538053eb502a954644e4f3c031b45b","modified":1547811739497},{"_id":"source/medias/banner/15.jpg","hash":"865d101a4a03255f3295d4019be050d514058569","modified":1547811739515},{"_id":"source/medias/banner/10.jpg","hash":"439577de1e3dc86ae937074bb47daa9b2c44cbbb","modified":1547811739406},{"_id":"source/medias/banner/12.jpg","hash":"3d751670fd5933392f07763e5acceafd454eaf9d","modified":1547811739448},{"_id":"source/medias/banner/16.jpg","hash":"d692b0a4fb37f11a4388ceb600adfeb427d182f9","modified":1547811739545},{"_id":"source/medias/banner/18.jpg","hash":"7096f48ecf0f99491ca0cd7f8b280f47765e6c15","modified":1547811739584},{"_id":"source/medias/banner/5.jpg","hash":"05a5621415a1ac2a19d09bc2e0deefd121cacb92","modified":1543582777226},{"_id":"source/medias/banner/3.jpg","hash":"6ca7ae198a3f44e53fd09784d22ecfdff9c6db61","modified":1543582612959},{"_id":"source/medias/banner/7.jpg","hash":"b10a065f246a3cb09b4afe41fd97bf0d970cf4df","modified":1543582456949},{"_id":"source/medias/banner/2.jpg","hash":"d78cde78349b6dbbaf19be760e978bcf4597b481","modified":1543582763351},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1547734409096},{"_id":"source/medias/banner/9.jpg","hash":"2babc0df32efe4f1149d200c558e3af476cb638a","modified":1547811739639},{"_id":"source/medias/banner/8.jpg","hash":"67b4fa23b3ee9e624e02f304da39b81a652c998e","modified":1547811739623},{"_id":"source/medias/banner/19.jpg","hash":"8edec90455bcd2d7db8b799649435d26c97f36f4","modified":1548162924789},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1547734409076},{"_id":"themes/hexo-theme-matery/source/libs/materialize/js/materialize.min.js","hash":"338a96318e7c9452cec509fcf8dea1511db660b2","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/materialize/css/materialize.min.css","hash":"4eaae73c0c2e342523d391057945e3c366020e3e","modified":1547734409116},{"_id":"source/medias/banner/6.jpg","hash":"de576214450e7a85812620f3a1f9832f204f1293","modified":1543582615702},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"b7085b5c1dc3f56f81a8bf93290e2a3f24e4d8ed","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"56850c3139cbd72a0eff0c35d8fac32c9c66dd6a","modified":1547734409166},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1547734409116},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1547734409096},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1547734409136},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"c5ff32ccf63106152dac687395d2e3551d9fcadb","modified":1547734409126},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1547734409146},{"_id":"source/medias/banner/4.jpg","hash":"ee02c016e1dd8367edcf4ac9d65818b26d484c3d","modified":1500794617709},{"_id":"themes/hexo-theme-matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1547734409086},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1547734409146},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1547734409106},{"_id":"public/atom.xml","hash":"a2f9ad63d24f80c40f73e2f12abee507f6369fdc","modified":1550195276780},{"_id":"public/search.xml","hash":"c684b2899ae6678cfe3dc36cba691f0b1031d986","modified":1550195277120},{"_id":"public/about/index.html","hash":"3f0f15fb9c5e367d50671b8e1d0a3f31ff5465a4","modified":1550195277489},{"_id":"public/friends/index.html","hash":"76b158f96a37e66a05a244c4e2c8d9a97aac9561","modified":1548826934478},{"_id":"public/categories/index.html","hash":"c975e2a2975d8d10207dcdc832f1f0f176c6378a","modified":1550195277489},{"_id":"public/tags/index.html","hash":"65f1fbcdb08cc95f9deb49dcd2a9487b8fb96829","modified":1550195277498},{"_id":"public/2019/01/28/wei-yun-suan-de-na-xie-sao-cao-zuo/index.html","hash":"00c14b8d0d7c292202d1c82283c0fbbe872406ad","modified":1550195277499},{"_id":"public/2019/01/26/hong-hei-shu-rbtree-zai-jdk-zhong-de-shi-xian/index.html","hash":"987430d797e7fe27136854ea13dc25870784958d","modified":1548826934479},{"_id":"public/2019/01/23/cha-kuai-gai-man-b-shu-gai-kuai-cha-man-lsm-shu/index.html","hash":"94b4d454f09f661a6e3c7c7d34f40b41b1678bf9","modified":1548826934479},{"_id":"public/2019/01/22/jiu-jing-ying-gai-zen-me-shi-xian-fen-bu-shi-suo/index.html","hash":"4d7847863d8c0ad0ca8340b88ef41b5d7f881e6c","modified":1550195277500},{"_id":"public/2019/01/21/xian-liu-fang-an-dui-bi/index.html","hash":"64d70a602e0cdf21a2e125c53c88effd30a0e555","modified":1548826934479},{"_id":"public/2019/01/17/springmvc-yuan-ma-zi-tan/index.html","hash":"15788077c785916e02ab02c18d2b486ec08cfd50","modified":1550195277500},{"_id":"public/2018/12/19/she-ji-mo-shi-si/index.html","hash":"c939beedda608482c5bf053dbec2bc8ae25e7bf6","modified":1548826934479},{"_id":"public/2018/12/18/she-ji-mo-shi-san/index.html","hash":"84181c5c308a29e56b56b4a31c477d331e7c3b38","modified":1550195277500},{"_id":"public/2018/12/17/she-ji-mo-shi-er/index.html","hash":"0ba1490479a90c80c7cc1759be5ceea29d03ce9b","modified":1550195277500},{"_id":"public/2018/12/16/she-ji-mo-shi-yi/index.html","hash":"b33a3f578b3df47d947261685e74fec2071270c2","modified":1550195277500},{"_id":"public/2018/11/25/jdk-de-kuai-su-pai-xu/index.html","hash":"895bad52ca46934cde014b4c68cfe8bc959fcbf9","modified":1550195277500},{"_id":"public/archives/index.html","hash":"a9cffe9b9c83840a042fe825232370a8fab87a0d","modified":1550195277501},{"_id":"public/archives/2018/index.html","hash":"c4472bade32b29be7dea53e8e13193db367505aa","modified":1550195277501},{"_id":"public/archives/2018/11/index.html","hash":"c0ccb94c01be74173271ec1c5c98f9ee6c1d8ce2","modified":1550195277501},{"_id":"public/archives/2018/12/index.html","hash":"224810df616569928e8ed566e52346362df64020","modified":1550195277501},{"_id":"public/archives/2019/index.html","hash":"68812c83a69f62a45aed17dc73b90277debec17a","modified":1550195277501},{"_id":"public/archives/2019/01/index.html","hash":"7af760299d9fea5921322025d50ee1132217f5f4","modified":1550195277502},{"_id":"public/categories/springMVC/index.html","hash":"49b72e3846c209cf64ba707a20148168f581ee2f","modified":1550195277500},{"_id":"public/categories/数据结构/index.html","hash":"1fa6fe3feb42643fd9072fbecda244e31f51afad","modified":1550195277500},{"_id":"public/categories/设计模式/index.html","hash":"fe11f06965281e66493706fa0d6b9b5987db0e6c","modified":1550195277500},{"_id":"public/categories/分布式/index.html","hash":"12a128c84dd971b41ba3e49604cac6587156cae5","modified":1550195277501},{"_id":"public/categories/mysql/index.html","hash":"887ec88e3efe6d438dafd4871ede4c5bca9bd9a3","modified":1550195277501},{"_id":"public/categories/算法/index.html","hash":"58d06e5c6f76ef2b30d81a142c5b1572092ac758","modified":1550195277501},{"_id":"public/categories/mysql/数据结构/index.html","hash":"2a70d08d1e4b4311a9ac1d28c559358a74820878","modified":1550195277501},{"_id":"public/index.html","hash":"d5799e87f882c6f5151b5501e4bd54ef7c736b04","modified":1550195277502},{"_id":"public/tags/源码/index.html","hash":"1385b1b2273e57b11edc45a6b4f4566f2de85094","modified":1550195277502},{"_id":"public/tags/springMVC/index.html","hash":"7bf96f788dc7f5b05e500a64935cfe2eb959d012","modified":1550195277502},{"_id":"public/tags/数据结构/index.html","hash":"2b04f9817c3df579b430c3356cc10bea4443aac5","modified":1550195277502},{"_id":"public/tags/设计模式/index.html","hash":"5991c22992c4c15e237352777a719b8b07b659f1","modified":1550195277502},{"_id":"public/tags/分布式/index.html","hash":"f531ec4c591d43c765bfe0fe4221fb2b89ab732d","modified":1550195277502},{"_id":"public/tags/mysql/index.html","hash":"46fc25437f0a6c7d050a7f9264aa212b5b694110","modified":1550195277502},{"_id":"public/tags/索引/index.html","hash":"13c185b03c752de6a3d144138b5efde600b3581f","modified":1550195277502},{"_id":"public/tags/Algorithm/index.html","hash":"1dfc686a49985184fb1f32048120bd3988e0efb2","modified":1550195277502},{"_id":"public/tags/算法/index.html","hash":"f0f77476d974258bccf5052aae2d014628838521","modified":1550195277502},{"_id":"public/tags/leetcode/index.html","hash":"b260d15c018e0560cb753ee82b86f21e4158e0d3","modified":1550195277502},{"_id":"public/CNAME","hash":"1403b3255973457a8ec76f82d69189e73b592c80","modified":1548826934561},{"_id":"public/images/红黑树插入调整.png","hash":"723e1cf5b1e1c3f40e7a0ab0e4e97c90496e471b","modified":1548826934561},{"_id":"public/favicon.png","hash":"20674c497b75fc889194b47fd18ecea12303d8ec","modified":1548826934561},{"_id":"public/images/红黑树删除修复.png","hash":"5094f414c3cbc392b6043cdafe1d708ede18f575","modified":1548826934561},{"_id":"public/medias/avatar.jpg","hash":"b7f8ca0c682f95d93f002c845aafbcb508ec2b0f","modified":1548826934561},{"_id":"public/medias/logo.png","hash":"4050259723bd418648ec40028a8020364e57a6a3","modified":1548826934561},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1548826934562},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1548826934562},{"_id":"public/medias/featureimages/13.jpg","hash":"66706dfde7d910182c2f1dbadd0e9e917630b8dd","modified":1548826934562},{"_id":"public/medias/featureimages/16.jpg","hash":"9cac6b80b0cc8959fc8aabfbd1adcab79ebebfc9","modified":1548826934562},{"_id":"public/medias/featureimages/21.jpg","hash":"d70b088850c3565e5b5bb9eb8fe4abe688c964cf","modified":1548826934562},{"_id":"public/medias/featureimages/2.jpg","hash":"16f1d89cdba4dce935ac0f12599e0fcfda543a93","modified":1548826934562},{"_id":"public/medias/featureimages/15.jpg","hash":"5cf9fc64d5d74ab6ba69bb8bff580fdc22ba32d0","modified":1548826934562},{"_id":"public/medias/featureimages/23.jpg","hash":"ed5ac9f616d3b99af5188a10b1761884c37e93e5","modified":1548826934562},{"_id":"public/medias/featureimages/22.jpg","hash":"bf5b59d193e5ca089a7fff034c222bfa2c4dc41f","modified":1548826934563},{"_id":"public/medias/featureimages/5.jpg","hash":"c3c1f36a1b1886037db604f151f335cd4599e970","modified":1548826934563},{"_id":"public/medias/featureimages/8.jpg","hash":"5a46ca4ab4c4ab2101a2af77a31a8878bccc483c","modified":1548826934563},{"_id":"public/medias/featureimages/7.jpg","hash":"a0246a4a560438938489cdd154e35f172b3f31b0","modified":1548826934563},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1548826934563},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1548826934563},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1548826934565},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1548826934565},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1548826934565},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1548826934566},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1548826934566},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1548826934566},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1548826934566},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1548826934566},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1548826934566},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1548826934566},{"_id":"public/libs/materialize/font/material-design-icons/LICENSE.txt","hash":"b7085b5c1dc3f56f81a8bf93290e2a3f24e4d8ed","modified":1548826934566},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1548826934567},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff2","hash":"2355cb4f824d070bc42c4ce6b97cab71af1f4ca2","modified":1548826934567},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1548826934568},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1548826934569},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1548826934569},{"_id":"public/css/prism-tomorrow.css","hash":"2eb468e82b669045d37cb6b503af97dabc0a9eb2","modified":1548826934570},{"_id":"public/medias/banner/0.jpg","hash":"1f2ec55fe7825475fde2601573bb622f0bf2acba","modified":1548826934582},{"_id":"public/medias/featureimages/1.jpg","hash":"d16e28bd23ea3a63643826dde5eea6b7a9bdda5d","modified":1548826934583},{"_id":"public/medias/featureimages/10.jpg","hash":"838e704942de076c60894d14e5f280e2724b6f68","modified":1548826934583},{"_id":"public/medias/featureimages/11.jpg","hash":"9ed45f95b83626e3d91d6c405eb8bfe6fcb9736a","modified":1548826934583},{"_id":"public/medias/featureimages/12.jpg","hash":"047be4239dd7e0be83243ee6b49a392a61f16b9a","modified":1548826934583},{"_id":"public/medias/featureimages/14.jpg","hash":"8aeb816faca2d5eaea4cce9e881d6ff87b8c7cf1","modified":1548826934583},{"_id":"public/medias/featureimages/17.jpg","hash":"f168ca5b046d10a878a7b0bcfab540e2c4428887","modified":1548826934583},{"_id":"public/medias/featureimages/18.jpg","hash":"ae23fdfaa59bc57b7ed49e90c5d59e4b68e1eea5","modified":1548826934583},{"_id":"public/medias/featureimages/0.jpg","hash":"2066cdda98ad0035071cd4aa7bd696eb078c0b6d","modified":1548826934583},{"_id":"public/medias/featureimages/20.jpg","hash":"8271c4a327632b566ea62f546c083d08a0528e72","modified":1548826934584},{"_id":"public/medias/featureimages/4.jpg","hash":"4eea5bdb5724ef1ed65790e481eda0d2fb176bf0","modified":1548826934584},{"_id":"public/medias/featureimages/19.jpg","hash":"57bc7c804b78b5cceb4eb1f9e51b734b75151b71","modified":1548826934584},{"_id":"public/medias/featureimages/3.jpg","hash":"5e879652e032f02961a331b598a50b60ebe80a39","modified":1548826934584},{"_id":"public/medias/featureimages/6.jpg","hash":"c63ff64bdd5f6c82da8804c7248fc519d23eaf0b","modified":1548826934584},{"_id":"public/medias/featureimages/9.jpg","hash":"815c84778b721e3606c2bd7c099c7de7c53251ba","modified":1548826934584},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1548826934584},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.eot","hash":"fc1bc1337f3313ead42b22a67a142d4e0d356b3a","modified":1548826934584},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.ttf","hash":"2cb66ac73a2d32ae8d2f807f705eff26fcf93323","modified":1548826934585},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.woff","hash":"ee77184556f7b66fcb8ee9496f81ac62f792d7dc","modified":1548826934585},{"_id":"public/libs/materialize/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1548826934585},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1548826934585},{"_id":"public/libs/materialize/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1548826934585},{"_id":"public/libs/materialize/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1548826934585},{"_id":"public/libs/materialize/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1548826934586},{"_id":"public/libs/materialize/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1548826934586},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1548826934586},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1548826934586},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1548826934586},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1548826934601},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1548826934602},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1548826934602},{"_id":"public/js/matery.js","hash":"3f8e6afb067705375ce27affdab77db19bbc3ce1","modified":1548826934602},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1548826934602},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1548826934602},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1548826934602},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1548826934602},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1548826934602},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1548826934602},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1548826934602},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1548826934602},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1548826934603},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1548826934603},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1548826934619},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1548826934620},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1548826934620},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1548826934637},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1548826934638},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1548826934639},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1548826934639},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1548826934639},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1548826934675},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1548826934675},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1548826934676},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1548826934676},{"_id":"public/medias/banner/18.jpg","hash":"7096f48ecf0f99491ca0cd7f8b280f47765e6c15","modified":1548826934676},{"_id":"public/medias/banner/8.jpg","hash":"67b4fa23b3ee9e624e02f304da39b81a652c998e","modified":1548826934676},{"_id":"public/css/matery.css","hash":"c8ff38719365778af48c55acd88e02a1c4dff4a8","modified":1550195277533},{"_id":"public/medias/banner/17.jpg","hash":"9549c6072b3d4232b1a7c6e1e06dc641e30a291b","modified":1548826934700},{"_id":"public/medias/banner/5.jpg","hash":"05a5621415a1ac2a19d09bc2e0deefd121cacb92","modified":1548826934700},{"_id":"public/medias/banner/1.jpg","hash":"d52b83474c37e60c240174b9c1c02ac03e1f9e00","modified":1548826934700},{"_id":"public/medias/banner/3.jpg","hash":"6ca7ae198a3f44e53fd09784d22ecfdff9c6db61","modified":1548826934700},{"_id":"public/medias/banner/13.jpg","hash":"3d42593a39bf36b72e8ba22722dd136be6574c84","modified":1548826934701},{"_id":"public/medias/banner/11.jpg","hash":"8052f2a2a230c7452e957b5a107b17c0f6d8167b","modified":1548826934701},{"_id":"public/medias/banner/14.jpg","hash":"8c581b44d2538053eb502a954644e4f3c031b45b","modified":1548826934702},{"_id":"public/medias/banner/15.jpg","hash":"865d101a4a03255f3295d4019be050d514058569","modified":1548826934702},{"_id":"public/medias/banner/12.jpg","hash":"3d751670fd5933392f07763e5acceafd454eaf9d","modified":1548826934702},{"_id":"public/medias/banner/10.jpg","hash":"439577de1e3dc86ae937074bb47daa9b2c44cbbb","modified":1548826934703},{"_id":"public/medias/banner/16.jpg","hash":"d692b0a4fb37f11a4388ceb600adfeb427d182f9","modified":1548826934703},{"_id":"public/medias/banner/7.jpg","hash":"b10a065f246a3cb09b4afe41fd97bf0d970cf4df","modified":1548826934703},{"_id":"public/medias/banner/9.jpg","hash":"2babc0df32efe4f1149d200c558e3af476cb638a","modified":1548826934704},{"_id":"public/medias/banner/19.jpg","hash":"8edec90455bcd2d7db8b799649435d26c97f36f4","modified":1548826934704},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1548826934755},{"_id":"public/medias/banner/6.jpg","hash":"de576214450e7a85812620f3a1f9832f204f1293","modified":1548826934755},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1548826934814},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1548826934814},{"_id":"public/medias/banner/2.jpg","hash":"d78cde78349b6dbbaf19be760e978bcf4597b481","modified":1548826934814},{"_id":"public/libs/materialize/font/material-design-icons/Material-Design-Icons.svg","hash":"c5ff32ccf63106152dac687395d2e3551d9fcadb","modified":1548826934840},{"_id":"public/libs/valine/Valine.min.js","hash":"031c1a5640d64ab3b829395ad5a7596b9fb122e6","modified":1548826934879},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1548826934911},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1548826934941},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1548826934945},{"_id":"public/medias/banner/4.jpg","hash":"ee02c016e1dd8367edcf4ac9d65818b26d484c3d","modified":1548826934959},{"_id":"public/libs/materialize/js/materialize.min.js","hash":"900e478fb609e18a4f785164fc6f6b0442e8a94e","modified":1548826934965},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1548826934972},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"734f56442e62fe55f677e8ccae7f175445667767","modified":1548826934975},{"_id":"public/libs/materialize/css/materialize.min.css","hash":"ca9b5271c307593264daad9753b962a0a8db1cef","modified":1548826934975},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1548826935003},{"_id":"source/_posts/Application.md","hash":"2a3445d73805e8186e6a04d76a8e47901191cb00","modified":1550194667447},{"_id":"public/2019/02/13/application/index.html","hash":"9e19351286cd99c974e9e497e89a1e4b53563677","modified":1550195277499},{"_id":"public/archives/2019/02/index.html","hash":"3c8033dd1978509a2e338460bb5e93955f7bfb8e","modified":1550195277501},{"_id":"public/categories/设计思想/index.html","hash":"afd638a494ca2bd877abe907aa3c5f0be4ff326c","modified":1550195277505},{"_id":"public/tags/阅读/index.html","hash":"f8e46d0e78fee06cf75eb3ee659966ae70a9a905","modified":1550195277506}],"Category":[{"name":"springMVC","_id":"cjrirkdbi000614tvhgi024bq"},{"name":"数据结构","_id":"cjrirkdbq000b14tvdf00dd4l"},{"name":"设计模式","_id":"cjrirkdcg000g14tvvum8odd5"},{"name":"分布式","_id":"cjrirkdct000w14tvnx0o3ugm"},{"name":"mysql","_id":"cjrirkddp001714tvk182mjfc"},{"name":"算法","_id":"cjrirkddq001914tv976r63qq"},{"name":"数据结构","parent":"cjrirkddp001714tvk182mjfc","_id":"cjrirkddr001b14tvwsv374td"},{"name":"设计思想","_id":"cjs5e8qaa0001pwz97m30xn2p"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-01-17T14:47:13.603Z","path":"about/index.html","comments":1,"_id":"cjrirkd1z000014tvxf5kgfyd","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2019-01-17T14:47:23.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-01-17 22:47:23\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-01-18T01:00:28.762Z","path":"friends/index.html","_id":"cjrirkd21000114tv52tqgxzi","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2019-01-17T14:42:08.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-01-17 22:42:08\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2019-01-18T01:00:26.853Z","path":"categories/index.html","_id":"cjrirkd22000214tvwv4hla0r","comments":1,"content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2019-01-13T09:42:49.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-01-13 17:42:49\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2019-01-17T14:46:20.500Z","path":"tags/index.html","comments":1,"_id":"cjrirkd23000314tv08ch2ehe","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"springMVC 源码自探","date":"2019-01-17T07:28:30.000Z","_content":"## springMVC 源码自探\n\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言\n弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：\n> 1. http/https的知识。http请求的组成。\n2. 消息转化(参数是**如何解析**的，**什么时候解析**的，我们给常用的注解是如何实现的)\n3. springMVC拦截器的实现原理\n4. 其他，如消息监控的植入actuator,zipkin等。\n\n### spring的启动\n>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().\n\n### 一个rest请求的到来\n#### 入口\n> 如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法\n确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊\n\n#### DispatcherServlet.doDispatch()\n>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler\n 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。\n 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）（原本有三个找到对应的支持的）\n 供以后使用，也就是下面的这个方法：\n#### ServletInvocableHandlerMethod.invokeAndHandle()\n>执行里面的方法，并处理返回值\n a. 设置响应状态，\n b. 设置mavContainer处理状态设置为未处理完毕。\n c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)\n#### InvocableHandlerMethod.invokeForRequest() \n>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。\n后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。\nspringMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。\n ","source":"_posts/springMVC源码自探.md","raw":"title: springMVC 源码自探\ndate: 2019-01-17 15:28:30\ntags: [源码, springMVC]\ncategories: [springMVC]\n---\n## springMVC 源码自探\n\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言\n弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：\n> 1. http/https的知识。http请求的组成。\n2. 消息转化(参数是**如何解析**的，**什么时候解析**的，我们给常用的注解是如何实现的)\n3. springMVC拦截器的实现原理\n4. 其他，如消息监控的植入actuator,zipkin等。\n\n### spring的启动\n>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().\n\n### 一个rest请求的到来\n#### 入口\n> 如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法\n确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊\n\n#### DispatcherServlet.doDispatch()\n>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler\n 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。\n 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）（原本有三个找到对应的支持的）\n 供以后使用，也就是下面的这个方法：\n#### ServletInvocableHandlerMethod.invokeAndHandle()\n>执行里面的方法，并处理返回值\n a. 设置响应状态，\n b. 设置mavContainer处理状态设置为未处理完毕。\n c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)\n#### InvocableHandlerMethod.invokeForRequest() \n>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。\n后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。\nspringMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。\n ","slug":"springMVC源码自探","published":1,"updated":"2019-01-26T14:21:27.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkd2l000414tv2xos12gh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"springMVC-源码自探\"><a href=\"#springMVC-源码自探\" class=\"headerlink\" title=\"springMVC 源码自探\"></a>springMVC 源码自探</h2><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：</p>\n<blockquote>\n<ol>\n<li>http/https的知识。http请求的组成。</li>\n<li>消息转化(参数是<strong>如何解析</strong>的，<strong>什么时候解析</strong>的，我们给常用的注解是如何实现的)</li>\n<li>springMVC拦截器的实现原理</li>\n<li>其他，如消息监控的植入actuator,zipkin等。</li>\n</ol>\n</blockquote>\n<h3 id=\"spring的启动\"><a href=\"#spring的启动\" class=\"headerlink\" title=\"spring的启动\"></a>spring的启动</h3><blockquote>\n<p>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().</p>\n</blockquote>\n<h3 id=\"一个rest请求的到来\"><a href=\"#一个rest请求的到来\" class=\"headerlink\" title=\"一个rest请求的到来\"></a>一个rest请求的到来</h3><h4 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h4><blockquote>\n<p>如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法<br>确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊</p>\n</blockquote>\n<h4 id=\"DispatcherServlet-doDispatch\"><a href=\"#DispatcherServlet-doDispatch\" class=\"headerlink\" title=\"DispatcherServlet.doDispatch()\"></a>DispatcherServlet.doDispatch()</h4><blockquote>\n<p>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler<br> 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。<br> 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）（原本有三个找到对应的支持的）<br> 供以后使用，也就是下面的这个方法：</p>\n</blockquote>\n<h4 id=\"ServletInvocableHandlerMethod-invokeAndHandle\"><a href=\"#ServletInvocableHandlerMethod-invokeAndHandle\" class=\"headerlink\" title=\"ServletInvocableHandlerMethod.invokeAndHandle()\"></a>ServletInvocableHandlerMethod.invokeAndHandle()</h4><blockquote>\n<p>执行里面的方法，并处理返回值<br> a. 设置响应状态，<br> b. 设置mavContainer处理状态设置为未处理完毕。<br> c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)</p>\n</blockquote>\n<h4 id=\"InvocableHandlerMethod-invokeForRequest\"><a href=\"#InvocableHandlerMethod-invokeForRequest\" class=\"headerlink\" title=\"InvocableHandlerMethod.invokeForRequest()\"></a>InvocableHandlerMethod.invokeForRequest()</h4><blockquote>\n<p>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。<br>后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。<br>springMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"springMVC-源码自探\"><a href=\"#springMVC-源码自探\" class=\"headerlink\" title=\"springMVC 源码自探\"></a>springMVC 源码自探</h2><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>弄清楚springMVC流程对我们写rest接口有莫大的好处，因为和它绑定在一起的还有这些重要的东西：</p>\n<blockquote>\n<ol>\n<li>http/https的知识。http请求的组成。</li>\n<li>消息转化(参数是<strong>如何解析</strong>的，<strong>什么时候解析</strong>的，我们给常用的注解是如何实现的)</li>\n<li>springMVC拦截器的实现原理</li>\n<li>其他，如消息监控的植入actuator,zipkin等。</li>\n</ol>\n</blockquote>\n<h3 id=\"spring的启动\"><a href=\"#spring的启动\" class=\"headerlink\" title=\"spring的启动\"></a>spring的启动</h3><blockquote>\n<p>spring启动的时候会扫描各个controller，并默认以单例的形式生成各个handler(controller类),handlerMethod().</p>\n</blockquote>\n<h3 id=\"一个rest请求的到来\"><a href=\"#一个rest请求的到来\" class=\"headerlink\" title=\"一个rest请求的到来\"></a>一个rest请求的到来</h3><h4 id=\"入口\"><a href=\"#入口\" class=\"headerlink\" title=\"入口\"></a>入口</h4><blockquote>\n<p>如果入口是从最开始说的话其实是从tomcat的各个过滤器(filter)顺序调用过来的，再由httpServlet拉起springMVC框架的service方法<br>确定方法类型后执行doPost，或者doGet。下面只会会将几个重要过程领出来聊一聊</p>\n</blockquote>\n<h4 id=\"DispatcherServlet-doDispatch\"><a href=\"#DispatcherServlet-doDispatch\" class=\"headerlink\" title=\"DispatcherServlet.doDispatch()\"></a>DispatcherServlet.doDispatch()</h4><blockquote>\n<p>先从10个handlerMappings中的找到对应的handlerMapping,然后从这个handlerMapping通过urlPath，找到对应方法的handler<br> 并将拦截器加入handler组装成HandlerExecutionChain，如果执行HandlerExecutionChain的时候拦截器返回false方法会在止到这里直接返回。<br> 拦截器如果通过，找到能够使用这个handler(Method Handler)的handlerAdapter（一般是这个:RequestMappingHandlerAdapter）（原本有三个找到对应的支持的）<br> 供以后使用，也就是下面的这个方法：</p>\n</blockquote>\n<h4 id=\"ServletInvocableHandlerMethod-invokeAndHandle\"><a href=\"#ServletInvocableHandlerMethod-invokeAndHandle\" class=\"headerlink\" title=\"ServletInvocableHandlerMethod.invokeAndHandle()\"></a>ServletInvocableHandlerMethod.invokeAndHandle()</h4><blockquote>\n<p>执行里面的方法，并处理返回值<br> a. 设置响应状态，<br> b. 设置mavContainer处理状态设置为未处理完毕。<br> c. 并对返回接口进行处理,responseBody的注解会在这里使用(用于找到返回值的handler)，并进行消息转化(json)</p>\n</blockquote>\n<h4 id=\"InvocableHandlerMethod-invokeForRequest\"><a href=\"#InvocableHandlerMethod-invokeForRequest\" class=\"headerlink\" title=\"InvocableHandlerMethod.invokeForRequest()\"></a>InvocableHandlerMethod.invokeForRequest()</h4><blockquote>\n<p>这里会解析并映射入参，这里会有各种解析参数的解析器，找到对应的解析器后然后会根据参数名字到request里面取值。<br>后放入到对应的参数列表里面再将参数放入代理方法执行invoke，并返回业务代码里的返回值。<br>springMVC的字段名在request里面是这样的：如果是get方法一般就是上面的parameterMap里面的。</p>\n</blockquote>\n"},{"title":"红黑树在jdk中的实现","date":"2019-01-26T02:51:33.000Z","_content":"### 前言\njdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。\n\n### 基本概念\n红黑树的**基本概念**还是贴上来好点，该数据结构必须**同时**满足下面5点条件,[参见wiki](https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91)：\n>1. 节点是红色或黑色。\n>2. 根是黑色。\n>3. 所有叶子都是黑色（叶子是NIL节点）。\n>4. 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）\n>5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    \n\n>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。\n\n### 插入\n插入相对简单点，主要的工作是修复插入带来的影响，梳理下**核心逻辑**：\n>父节点是红色的时候才会需要调整\n1. 获取到叔节点的颜色  \n    1. 为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(**回到开始**)\n    2. 为黑色：\n        1. 先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)\n        2. 换色(交换父，爷节点颜色) + 旋转(爷节点为中心) **调整结束**\n\n```` java\n    /** From CLR */\n    private void fixAfterInsertion(Entry<K,V> x) {\n        x.color = RED;\n        // 父节点是红色的时候才会需要调整\n        while (x != null && x != root && x.parent.color == RED) {\n            //  父节点是左节点的情况\n            if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {\n                // 1. 获取到叔节点U(uncle)\n                Entry<K,V> y = rightOf(parentOf(parentOf(x)));\n                if (colorOf(y) == RED) {\n                // 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)\n                    setColor(parentOf(x), BLACK);\n                    setColor(y, BLACK);\n                    setColor(parentOf(parentOf(x)), RED);\n                    x = parentOf(parentOf(x));\n                } else {\n                    // U 为黑色 不用递推可以直接解决\n                    // 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)\n                    if (x == rightOf(parentOf(x))) {// 等价转换\n                        x = parentOf(x);\n                        rotateLeft(x);\n                    }\n                    // 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)\n                    setColor(parentOf(x), BLACK); // 父节点已经为黑\n                    setColor(parentOf(parentOf(x)), RED);\n                    rotateRight(parentOf(parentOf(x)));\n                    // 此时父节点为黑色，调整结束\n                }\n            } else { // 对称的，和上面思路一样\n                ......\n            }\n        }\n        root.color = BLACK;\n    }\n````\n\n### 删除\n删除相对复杂，主要的工作是修复删除带来的影响，梳理下**核心逻辑**：\n>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里**补一个黑色节点**\n1. 得到兄弟节点\n    1. 将兄弟节点变为黑色(如果兄弟节点为红的话)\n    2. **兄弟节点**是否有**红色子节点**\n      1. 没有: 问题移向父节点(**回到开始1**)\n      2. 有: 先将和当前节点反方向上的**兄弟节点的子节点N**变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(**结束**)\n        \n```` java\n    /** From CLR */\n    private void fixAfterDeletion(Entry<K,V> x) {\n        while (x != root && colorOf(x) == BLACK) {\n            // 当前为左节点\n            if (x == leftOf(parentOf(x))) {\n                // 得到兄弟节点 \n                Entry<K,V> sib = rightOf(parentOf(x));\n                // 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) \n                if (colorOf(sib) == RED) {\n                    setColor(sib, BLACK);\n                    setColor(parentOf(x), RED);\n                    rotateLeft(parentOf(x));\n                    sib = rightOf(parentOf(x));\n                }\n                // 兄弟节点是否有红色子节点\n                if (colorOf(leftOf(sib))  == BLACK &&\n                    colorOf(rightOf(sib)) == BLACK) {\n                    setColor(sib, RED);\n                    x = parentOf(x);\n                } else {\n                    // 将兄弟节点的右子节点变为红色\n                    if (colorOf(rightOf(sib)) == BLACK) {\n                        setColor(leftOf(sib), BLACK);\n                        setColor(sib, RED);\n                        rotateRight(sib);\n                        sib = rightOf(parentOf(x));\n                    }\n                    // 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色\n                    setColor(sib, colorOf(parentOf(x)));\n                    setColor(parentOf(x), BLACK);\n                    setColor(rightOf(sib), BLACK);\n                    // 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！\n                    rotateLeft(parentOf(x));\n                    x = root;\n                }\n            } else { // 对称,逻辑一模一样\n                ......\n            }\n        }\n        setColor(x, BLACK);\n    }\n````\n## 总结  \n>wiki里的c实现使用的是**尾递归**,但是java使用的是**非递归的while**实现的，好像目前java没有对尾递归做优化。\n### 插入的修复\n![](/images/红黑树插入调整.png)\n> 图片点击放大\n--- \n### 删除的修复\n![](/images/红黑树插入调整.png)","source":"_posts/红黑树RBTree在jdk中的实现.md","raw":"---\ntitle: 红黑树在jdk中的实现\ndate: 2019-01-26 10:51:33\ntags: [数据结构]\ncategories: [数据结构]\n---\n### 前言\njdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。\n\n### 基本概念\n红黑树的**基本概念**还是贴上来好点，该数据结构必须**同时**满足下面5点条件,[参见wiki](https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91)：\n>1. 节点是红色或黑色。\n>2. 根是黑色。\n>3. 所有叶子都是黑色（叶子是NIL节点）。\n>4. 每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）\n>5. 从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    \n\n>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。\n\n### 插入\n插入相对简单点，主要的工作是修复插入带来的影响，梳理下**核心逻辑**：\n>父节点是红色的时候才会需要调整\n1. 获取到叔节点的颜色  \n    1. 为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(**回到开始**)\n    2. 为黑色：\n        1. 先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)\n        2. 换色(交换父，爷节点颜色) + 旋转(爷节点为中心) **调整结束**\n\n```` java\n    /** From CLR */\n    private void fixAfterInsertion(Entry<K,V> x) {\n        x.color = RED;\n        // 父节点是红色的时候才会需要调整\n        while (x != null && x != root && x.parent.color == RED) {\n            //  父节点是左节点的情况\n            if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {\n                // 1. 获取到叔节点U(uncle)\n                Entry<K,V> y = rightOf(parentOf(parentOf(x)));\n                if (colorOf(y) == RED) {\n                // 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)\n                    setColor(parentOf(x), BLACK);\n                    setColor(y, BLACK);\n                    setColor(parentOf(parentOf(x)), RED);\n                    x = parentOf(parentOf(x));\n                } else {\n                    // U 为黑色 不用递推可以直接解决\n                    // 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)\n                    if (x == rightOf(parentOf(x))) {// 等价转换\n                        x = parentOf(x);\n                        rotateLeft(x);\n                    }\n                    // 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)\n                    setColor(parentOf(x), BLACK); // 父节点已经为黑\n                    setColor(parentOf(parentOf(x)), RED);\n                    rotateRight(parentOf(parentOf(x)));\n                    // 此时父节点为黑色，调整结束\n                }\n            } else { // 对称的，和上面思路一样\n                ......\n            }\n        }\n        root.color = BLACK;\n    }\n````\n\n### 删除\n删除相对复杂，主要的工作是修复删除带来的影响，梳理下**核心逻辑**：\n>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里**补一个黑色节点**\n1. 得到兄弟节点\n    1. 将兄弟节点变为黑色(如果兄弟节点为红的话)\n    2. **兄弟节点**是否有**红色子节点**\n      1. 没有: 问题移向父节点(**回到开始1**)\n      2. 有: 先将和当前节点反方向上的**兄弟节点的子节点N**变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(**结束**)\n        \n```` java\n    /** From CLR */\n    private void fixAfterDeletion(Entry<K,V> x) {\n        while (x != root && colorOf(x) == BLACK) {\n            // 当前为左节点\n            if (x == leftOf(parentOf(x))) {\n                // 得到兄弟节点 \n                Entry<K,V> sib = rightOf(parentOf(x));\n                // 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) \n                if (colorOf(sib) == RED) {\n                    setColor(sib, BLACK);\n                    setColor(parentOf(x), RED);\n                    rotateLeft(parentOf(x));\n                    sib = rightOf(parentOf(x));\n                }\n                // 兄弟节点是否有红色子节点\n                if (colorOf(leftOf(sib))  == BLACK &&\n                    colorOf(rightOf(sib)) == BLACK) {\n                    setColor(sib, RED);\n                    x = parentOf(x);\n                } else {\n                    // 将兄弟节点的右子节点变为红色\n                    if (colorOf(rightOf(sib)) == BLACK) {\n                        setColor(leftOf(sib), BLACK);\n                        setColor(sib, RED);\n                        rotateRight(sib);\n                        sib = rightOf(parentOf(x));\n                    }\n                    // 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色\n                    setColor(sib, colorOf(parentOf(x)));\n                    setColor(parentOf(x), BLACK);\n                    setColor(rightOf(sib), BLACK);\n                    // 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！\n                    rotateLeft(parentOf(x));\n                    x = root;\n                }\n            } else { // 对称,逻辑一模一样\n                ......\n            }\n        }\n        setColor(x, BLACK);\n    }\n````\n## 总结  \n>wiki里的c实现使用的是**尾递归**,但是java使用的是**非递归的while**实现的，好像目前java没有对尾递归做优化。\n### 插入的修复\n![](/images/红黑树插入调整.png)\n> 图片点击放大\n--- \n### 删除的修复\n![](/images/红黑树插入调整.png)","slug":"红黑树RBTree在jdk中的实现","published":1,"updated":"2019-01-26T09:09:58.327Z","_id":"cjrirkdbf000514tvjptda1rn","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>jdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>红黑树的<strong>基本概念</strong>还是贴上来好点，该数据结构必须<strong>同时</strong>满足下面5点条件,<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\" target=\"_blank\" rel=\"noopener\">参见wiki</a>：</p>\n<blockquote>\n<ol>\n<li>节点是红色或黑色。</li>\n<li>根是黑色。</li>\n<li>所有叶子都是黑色（叶子是NIL节点）。</li>\n<li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li>\n<li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    </li>\n</ol>\n</blockquote>\n<blockquote>\n<p>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。</p>\n</blockquote>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>插入相对简单点，主要的工作是修复插入带来的影响，梳理下<strong>核心逻辑</strong>：</p>\n<blockquote>\n<p>父节点是红色的时候才会需要调整</p>\n<ol>\n<li>获取到叔节点的颜色  <ol>\n<li>为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(<strong>回到开始</strong>)</li>\n<li>为黑色：<ol>\n<li>先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)</li>\n<li>换色(交换父，爷节点颜色) + 旋转(爷节点为中心) <strong>调整结束</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/** From CLR */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fixAfterInsertion</span><span class=\"token punctuation\">(</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        x<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> RED<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 父节点是红色的时候才会需要调整</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> null <span class=\"token operator\">&amp;&amp;</span> x <span class=\"token operator\">!=</span> root <span class=\"token operator\">&amp;&amp;</span> x<span class=\"token punctuation\">.</span>parent<span class=\"token punctuation\">.</span>color <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">//  父节点是左节点的情况</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">leftOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 1. 获取到叔节点U(uncle)</span>\n                Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> y <span class=\"token operator\">=</span> <span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// U 为黑色 不用递推可以直接解决</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 等价转换</span>\n                        x <span class=\"token operator\">=</span> <span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 父节点已经为黑</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 此时父节点为黑色，调整结束</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 对称的，和上面思路一样</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        root<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> BLACK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除相对复杂，主要的工作是修复删除带来的影响，梳理下<strong>核心逻辑</strong>：</p>\n<blockquote>\n<p>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里<strong>补一个黑色节点</strong></p>\n<ol>\n<li>得到兄弟节点<ol>\n<li>将兄弟节点变为黑色(如果兄弟节点为红的话)</li>\n<li><strong>兄弟节点</strong>是否有<strong>红色子节点</strong><ol>\n<li>没有: 问题移向父节点(<strong>回到开始1</strong>)</li>\n<li>有: 先将和当前节点反方向上的<strong>兄弟节点的子节点N</strong>变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(<strong>结束</strong>)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/** From CLR */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">fixAfterDeletion</span><span class=\"token punctuation\">(</span>Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">!=</span> root <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 当前为左节点</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token function\">leftOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 得到兄弟节点 </span>\n                Entry<span class=\"token operator\">&lt;</span>K<span class=\"token punctuation\">,</span>V<span class=\"token operator\">></span> sib <span class=\"token operator\">=</span> <span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) </span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> RED<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    sib <span class=\"token operator\">=</span> <span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 兄弟节点是否有红色子节点</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">leftOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">==</span> BLACK <span class=\"token operator\">&amp;&amp;</span>\n                    <span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">=</span> <span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 将兄弟节点的右子节点变为红色</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> BLACK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">leftOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">,</span> RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token function\">rotateRight</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                        sib <span class=\"token operator\">=</span> <span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">,</span> <span class=\"token function\">colorOf</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">rightOf</span><span class=\"token punctuation\">(</span>sib<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\" spellcheck=\"true\">// 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！</span>\n                    <span class=\"token function\">rotateLeft</span><span class=\"token punctuation\">(</span><span class=\"token function\">parentOf</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">=</span> root<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 对称,逻辑一模一样</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">setColor</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> BLACK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>wiki里的c实现使用的是<strong>尾递归</strong>,但是java使用的是<strong>非递归的while</strong>实现的，好像目前java没有对尾递归做优化。</p>\n</blockquote>\n<h3 id=\"插入的修复\"><a href=\"#插入的修复\" class=\"headerlink\" title=\"插入的修复\"></a>插入的修复</h3><p><img src=\"/images/红黑树插入调整.png\" alt=\"\"></p>\n<blockquote>\n<p>图片点击放大</p>\n</blockquote>\n<hr>\n<h3 id=\"删除的修复\"><a href=\"#删除的修复\" class=\"headerlink\" title=\"删除的修复\"></a>删除的修复</h3><p><img src=\"/images/红黑树插入调整.png\" alt=\"\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>jdk里主要有TreeMap和HashMap里有用到红黑树的数据结构，我觉得TreeMap的实现看起来友好一点，但是长时间不看也容易忘记，在这一并整理一下。本次源码是基于jdk1.8的TreeMap的插入和删除的方法。</p>\n<h3 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h3><p>红黑树的<strong>基本概念</strong>还是贴上来好点，该数据结构必须<strong>同时</strong>满足下面5点条件,<a href=\"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91\" target=\"_blank\" rel=\"noopener\">参见wiki</a>：</p>\n<blockquote>\n<ol>\n<li>节点是红色或黑色。</li>\n<li>根是黑色。</li>\n<li>所有叶子都是黑色（叶子是NIL节点）。</li>\n<li>每个红色节点必须有两个黑色的子节点。（从每个叶子到根的所有路径上不能有两个连续的红色节点。）</li>\n<li>从任一节点到其每个叶子的所有简单路径都包含相同数目的黑色节点    </li>\n</ol>\n</blockquote>\n<blockquote>\n<p>其实如果你能细心看完wiki的介绍并理解这里就不用看了，由于情况较多我这里是跟着源码做的总结，个人觉得删除相对难理解一点。</p>\n</blockquote>\n<h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p>插入相对简单点，主要的工作是修复插入带来的影响，梳理下<strong>核心逻辑</strong>：</p>\n<blockquote>\n<p>父节点是红色的时候才会需要调整</p>\n<ol>\n<li>获取到叔节点的颜色  <ol>\n<li>为红色：将父节点和叔节点染黑，爷节点染红，问题推向爷节点(<strong>回到开始</strong>)</li>\n<li>为黑色：<ol>\n<li>先将当前节点方向变为和父节点同向(即当前节点，父节点，爷节点摆成一条直线)</li>\n<li>换色(交换父，爷节点颜色) + 旋转(爷节点为中心) <strong>调整结束</strong></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"java\">    /** From CLR */\n    private void fixAfterInsertion(Entry&lt;K,V&gt; x) {\n        x.color = RED;\n        // 父节点是红色的时候才会需要调整\n        while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) {\n            //  父节点是左节点的情况\n            if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {\n                // 1. 获取到叔节点U(uncle)\n                Entry&lt;K,V&gt; y = rightOf(parentOf(parentOf(x)));\n                if (colorOf(y) == RED) {\n                // 如果U为红色:将父节点和叔节点染黑，爷节点染红，问题向爷节点递推(进入下一个循环)\n                    setColor(parentOf(x), BLACK);\n                    setColor(y, BLACK);\n                    setColor(parentOf(parentOf(x)), RED);\n                    x = parentOf(parentOf(x));\n                } else {\n                    // U 为黑色 不用递推可以直接解决\n                    // 如果当前节点是父节点的右节点，左旋，将自己变成父节点的左节(变得和父节点同向)\n                    if (x == rightOf(parentOf(x))) {// 等价转换\n                        x = parentOf(x);\n                        rotateLeft(x);\n                    }\n                    // 换色(交换父，爷节点颜色) + 旋转(爷节点为中心)\n                    setColor(parentOf(x), BLACK); // 父节点已经为黑\n                    setColor(parentOf(parentOf(x)), RED);\n                    rotateRight(parentOf(parentOf(x)));\n                    // 此时父节点为黑色，调整结束\n                }\n            } else { // 对称的，和上面思路一样\n                ......\n            }\n        }\n        root.color = BLACK;\n    }\n</code></pre>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>删除相对复杂，主要的工作是修复删除带来的影响，梳理下<strong>核心逻辑</strong>：</p>\n<blockquote>\n<p>当前节点是黑色的时候才需要修复，前面先使用后继节点删除，所以需要向当前节点这里<strong>补一个黑色节点</strong></p>\n<ol>\n<li>得到兄弟节点<ol>\n<li>将兄弟节点变为黑色(如果兄弟节点为红的话)</li>\n<li><strong>兄弟节点</strong>是否有<strong>红色子节点</strong><ol>\n<li>没有: 问题移向父节点(<strong>回到开始1</strong>)</li>\n<li>有: 先将和当前节点反方向上的<strong>兄弟节点的子节点N</strong>变为红色，将N染黑，交换兄弟和父节点颜色，以父节点为中心，向当前节点方向旋转(<strong>结束</strong>)</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</blockquote>\n<pre><code class=\"java\">    /** From CLR */\n    private void fixAfterDeletion(Entry&lt;K,V&gt; x) {\n        while (x != root &amp;&amp; colorOf(x) == BLACK) {\n            // 当前为左节点\n            if (x == leftOf(parentOf(x))) {\n                // 得到兄弟节点 \n                Entry&lt;K,V&gt; sib = rightOf(parentOf(x));\n                // 如果兄弟节点为红色， 交换兄弟节点和父节点颜色并左旋(目的是将兄弟节点变为黑色) \n                if (colorOf(sib) == RED) {\n                    setColor(sib, BLACK);\n                    setColor(parentOf(x), RED);\n                    rotateLeft(parentOf(x));\n                    sib = rightOf(parentOf(x));\n                }\n                // 兄弟节点是否有红色子节点\n                if (colorOf(leftOf(sib))  == BLACK &amp;&amp;\n                    colorOf(rightOf(sib)) == BLACK) {\n                    setColor(sib, RED);\n                    x = parentOf(x);\n                } else {\n                    // 将兄弟节点的右子节点变为红色\n                    if (colorOf(rightOf(sib)) == BLACK) {\n                        setColor(leftOf(sib), BLACK);\n                        setColor(sib, RED);\n                        rotateRight(sib);\n                        sib = rightOf(parentOf(x));\n                    }\n                    // 将兄弟节点右子节点染黑，交换兄弟和父节点的颜色\n                    setColor(sib, colorOf(parentOf(x)));\n                    setColor(parentOf(x), BLACK);\n                    setColor(rightOf(sib), BLACK);\n                    // 以父节点为中心左旋，这样自己这边就多了一个黑色节点，补偿结束！\n                    rotateLeft(parentOf(x));\n                    x = root;\n                }\n            } else { // 对称,逻辑一模一样\n                ......\n            }\n        }\n        setColor(x, BLACK);\n    }\n</code></pre>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>wiki里的c实现使用的是<strong>尾递归</strong>,但是java使用的是<strong>非递归的while</strong>实现的，好像目前java没有对尾递归做优化。</p>\n</blockquote>\n<h3 id=\"插入的修复\"><a href=\"#插入的修复\" class=\"headerlink\" title=\"插入的修复\"></a>插入的修复</h3><p><img src=\"/images/红黑树插入调整.png\" alt=\"\"></p>\n<blockquote>\n<p>图片点击放大</p>\n</blockquote>\n<hr>\n<h3 id=\"删除的修复\"><a href=\"#删除的修复\" class=\"headerlink\" title=\"删除的修复\"></a>删除的修复</h3><p><img src=\"/images/红黑树插入调整.png\" alt=\"\"></p>\n"},{"title":"设计模式.一","date":"2018-12-16T02:06:39.000Z","_content":"\n## 前言\n设计模式，对于一直写业务代码的人来说可能几乎涉及不到，其实也是，因为他是**设计**模式，肯定是用来设计的啊，写业务代码设计个啥，那肯定都是设计框架这样的才用到的嘛。\n设计模式其本身也是前人大牛总结的宝贵经验，要想写出厉害的代码肯定得站在巨人肩上了，我就我个人碰到的一些设计模式的典型例子来做一个总结，以便以后自己温习。\n\n### 1.单例模式\n就我自己而言我一直觉得这是一个大家都知道的设计模式，但是要将这个设计模式弄明白其实还是的花点时间，而且还得有点功底才可以的。\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 2.工厂模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 3.配置器模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 4.构建者模式Builder\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","source":"_posts/设计模式-一.md","raw":"---\ntitle: 设计模式.一\ndate: 2018-12-16 10:06:39\ntags: [设计模式]\ncategories: [设计模式]\n---\n\n## 前言\n设计模式，对于一直写业务代码的人来说可能几乎涉及不到，其实也是，因为他是**设计**模式，肯定是用来设计的啊，写业务代码设计个啥，那肯定都是设计框架这样的才用到的嘛。\n设计模式其本身也是前人大牛总结的宝贵经验，要想写出厉害的代码肯定得站在巨人肩上了，我就我个人碰到的一些设计模式的典型例子来做一个总结，以便以后自己温习。\n\n### 1.单例模式\n就我自己而言我一直觉得这是一个大家都知道的设计模式，但是要将这个设计模式弄明白其实还是的花点时间，而且还得有点功底才可以的。\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 2.工厂模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 3.配置器模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 4.构建者模式Builder\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","slug":"设计模式-一","published":1,"updated":"2019-01-26T14:21:27.742Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkdbk000814tvvi8bubmh","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>设计模式，对于一直写业务代码的人来说可能几乎涉及不到，其实也是，因为他是<strong>设计</strong>模式，肯定是用来设计的啊，写业务代码设计个啥，那肯定都是设计框架这样的才用到的嘛。<br>设计模式其本身也是前人大牛总结的宝贵经验，要想写出厉害的代码肯定得站在巨人肩上了，我就我个人碰到的一些设计模式的典型例子来做一个总结，以便以后自己温习。</p>\n<h3 id=\"1-单例模式\"><a href=\"#1-单例模式\" class=\"headerlink\" title=\"1.单例模式\"></a>1.单例模式</h3><p>就我自己而言我一直觉得这是一个大家都知道的设计模式，但是要将这个设计模式弄明白其实还是的花点时间，而且还得有点功底才可以的。</p>\n<ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2.工厂模式\"></a>2.工厂模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"3-配置器模式\"><a href=\"#3-配置器模式\" class=\"headerlink\" title=\"3.配置器模式\"></a>3.配置器模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"4-构建者模式Builder\"><a href=\"#4-构建者模式Builder\" class=\"headerlink\" title=\"4.构建者模式Builder\"></a>4.构建者模式Builder</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>设计模式，对于一直写业务代码的人来说可能几乎涉及不到，其实也是，因为他是<strong>设计</strong>模式，肯定是用来设计的啊，写业务代码设计个啥，那肯定都是设计框架这样的才用到的嘛。<br>设计模式其本身也是前人大牛总结的宝贵经验，要想写出厉害的代码肯定得站在巨人肩上了，我就我个人碰到的一些设计模式的典型例子来做一个总结，以便以后自己温习。</p>\n<h3 id=\"1-单例模式\"><a href=\"#1-单例模式\" class=\"headerlink\" title=\"1.单例模式\"></a>1.单例模式</h3><p>就我自己而言我一直觉得这是一个大家都知道的设计模式，但是要将这个设计模式弄明白其实还是的花点时间，而且还得有点功底才可以的。</p>\n<ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"2-工厂模式\"><a href=\"#2-工厂模式\" class=\"headerlink\" title=\"2.工厂模式\"></a>2.工厂模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"3-配置器模式\"><a href=\"#3-配置器模式\" class=\"headerlink\" title=\"3.配置器模式\"></a>3.配置器模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"4-构建者模式Builder\"><a href=\"#4-构建者模式Builder\" class=\"headerlink\" title=\"4.构建者模式Builder\"></a>4.构建者模式Builder</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n</li>\n</ul>\n"},{"title":"设计模式.三","date":"2018-12-18T02:28:20.000Z","_content":"### 9.观察者模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 10.原型模式Prototype\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 11.外观模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 12.迭代器模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","source":"_posts/设计模式-三.md","raw":"---\ntitle: 设计模式.三\ndate: 2018-12-18 10:28:20\ntags: [设计模式]\ncategories: [设计模式]\n---\n### 9.观察者模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 10.原型模式Prototype\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 11.外观模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 12.迭代器模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","slug":"设计模式-三","published":1,"updated":"2019-01-26T14:21:27.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkdbm000914tvovmd53ph","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h3 id=\"9-观察者模式\"><a href=\"#9-观察者模式\" class=\"headerlink\" title=\"9.观察者模式\"></a>9.观察者模式</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"10-原型模式Prototype\"><a href=\"#10-原型模式Prototype\" class=\"headerlink\" title=\"10.原型模式Prototype\"></a>10.原型模式Prototype</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"11-外观模式\"><a href=\"#11-外观模式\" class=\"headerlink\" title=\"11.外观模式\"></a>11.外观模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"12-迭代器模式\"><a href=\"#12-迭代器模式\" class=\"headerlink\" title=\"12.迭代器模式\"></a>12.迭代器模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"9-观察者模式\"><a href=\"#9-观察者模式\" class=\"headerlink\" title=\"9.观察者模式\"></a>9.观察者模式</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"10-原型模式Prototype\"><a href=\"#10-原型模式Prototype\" class=\"headerlink\" title=\"10.原型模式Prototype\"></a>10.原型模式Prototype</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"11-外观模式\"><a href=\"#11-外观模式\" class=\"headerlink\" title=\"11.外观模式\"></a>11.外观模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"12-迭代器模式\"><a href=\"#12-迭代器模式\" class=\"headerlink\" title=\"12.迭代器模式\"></a>12.迭代器模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n</li>\n</ul>\n"},{"title":"设计模式.二","date":"2018-12-17T02:26:24.000Z","_content":"接着一继续\n### 5.构建者模式Builder\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 6.模板方法Template\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 7.责任链模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 8.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","source":"_posts/设计模式-二.md","raw":"---\ntitle: 设计模式.二\ndate: 2018-12-17 10:26:24\ntags: [设计模式]\ncategories: [设计模式]\n---\n接着一继续\n### 5.构建者模式Builder\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 6.模板方法Template\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 7.责任链模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 8.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","slug":"设计模式-二","published":1,"updated":"2019-01-26T14:21:27.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkdbo000a14tv8hasals6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>接着一继续</p>\n<h3 id=\"5-构建者模式Builder\"><a href=\"#5-构建者模式Builder\" class=\"headerlink\" title=\"5.构建者模式Builder\"></a>5.构建者模式Builder</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"6-模板方法Template\"><a href=\"#6-模板方法Template\" class=\"headerlink\" title=\"6.模板方法Template\"></a>6.模板方法Template</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"7-责任链模式\"><a href=\"#7-责任链模式\" class=\"headerlink\" title=\"7.责任链模式\"></a>7.责任链模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"8-代理模式\"><a href=\"#8-代理模式\" class=\"headerlink\" title=\"8.代理模式\"></a>8.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>接着一继续</p>\n<h3 id=\"5-构建者模式Builder\"><a href=\"#5-构建者模式Builder\" class=\"headerlink\" title=\"5.构建者模式Builder\"></a>5.构建者模式Builder</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"6-模板方法Template\"><a href=\"#6-模板方法Template\" class=\"headerlink\" title=\"6.模板方法Template\"></a>6.模板方法Template</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"7-责任链模式\"><a href=\"#7-责任链模式\" class=\"headerlink\" title=\"7.责任链模式\"></a>7.责任链模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"8-代理模式\"><a href=\"#8-代理模式\" class=\"headerlink\" title=\"8.代理模式\"></a>8.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n</li>\n</ul>\n"},{"title":"设计模式.四","date":"2018-12-19T02:28:25.000Z","_content":"### 13.状态模式state\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 14.策略模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 15.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 16.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","source":"_posts/设计模式-四.md","raw":"---\ntitle: 设计模式.四\ndate: 2018-12-19 10:28:25\ntags: [设计模式]\ncategories: [设计模式]\n---\n### 13.状态模式state\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 14.策略模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 15.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n### 16.代理模式\n- 概念：\n- 应用：\n- 注意点：\n实操:\n````java\n    // todo\n````\n","slug":"设计模式-四","published":1,"updated":"2019-01-24T07:33:10.682Z","_id":"cjrirkdbs000d14tvnc7kmloh","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"13-状态模式state\"><a href=\"#13-状态模式state\" class=\"headerlink\" title=\"13.状态模式state\"></a>13.状态模式state</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"14-策略模式\"><a href=\"#14-策略模式\" class=\"headerlink\" title=\"14.策略模式\"></a>14.策略模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"15-代理模式\"><a href=\"#15-代理模式\" class=\"headerlink\" title=\"15.代理模式\"></a>15.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n<h3 id=\"16-代理模式\"><a href=\"#16-代理模式\" class=\"headerlink\" title=\"16.代理模式\"></a>16.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// todo</span>\n</code></pre>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"13-状态模式state\"><a href=\"#13-状态模式state\" class=\"headerlink\" title=\"13.状态模式state\"></a>13.状态模式state</h3><ul>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"14-策略模式\"><a href=\"#14-策略模式\" class=\"headerlink\" title=\"14.策略模式\"></a>14.策略模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"15-代理模式\"><a href=\"#15-代理模式\" class=\"headerlink\" title=\"15.代理模式\"></a>15.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n<h3 id=\"16-代理模式\"><a href=\"#16-代理模式\" class=\"headerlink\" title=\"16.代理模式\"></a>16.代理模式</h3></li>\n<li>概念：</li>\n<li>应用：</li>\n<li>注意点：<br>实操:<pre><code class=\"java\">  // todo\n</code></pre>\n</li>\n</ul>\n"},{"title":"分布式锁究竟应该怎么实现？","date":"2019-01-22T13:54:06.000Z","_content":"![](http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg)\n## 背景\n前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，\n实现的时候会数量一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。\n\n### 常用的分布式锁简介\n基于redis的分布式锁\n- 使用setNX的方式\n- 直接使用redis官方的redission已经实现好的redLock\n\n基于zookeeper的分布式锁\n- 利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。\n\n基于etcd的分布式锁\n- 原理与zookeeper类似\n\n### 基于redis分布式锁的具体方案及细节\n\n\n","source":"_posts/究竟应该怎么实现分布式锁 ？.md","raw":"---\ntitle: 分布式锁究竟应该怎么实现？\ndate: 2019-01-22 21:54:06\ntags: 分布式\ncategories: [分布式]\n---\n![](http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg)\n## 背景\n前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，\n实现的时候会数量一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。\n\n### 常用的分布式锁简介\n基于redis的分布式锁\n- 使用setNX的方式\n- 直接使用redis官方的redission已经实现好的redLock\n\n基于zookeeper的分布式锁\n- 利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。\n\n基于etcd的分布式锁\n- 原理与zookeeper类似\n\n### 基于redis分布式锁的具体方案及细节\n\n\n","slug":"究竟应该怎么实现分布式锁 ？","published":1,"updated":"2019-01-26T14:21:27.740Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkdc8000e14tv6jqqetap","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg\" alt=\"\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，<br>实现的时候会数量一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。</p>\n<h3 id=\"常用的分布式锁简介\"><a href=\"#常用的分布式锁简介\" class=\"headerlink\" title=\"常用的分布式锁简介\"></a>常用的分布式锁简介</h3><p>基于redis的分布式锁</p>\n<ul>\n<li>使用setNX的方式</li>\n<li>直接使用redis官方的redission已经实现好的redLock</li>\n</ul>\n<p>基于zookeeper的分布式锁</p>\n<ul>\n<li>利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。</li>\n</ul>\n<p>基于etcd的分布式锁</p>\n<ul>\n<li>原理与zookeeper类似</li>\n</ul>\n<h3 id=\"基于redis分布式锁的具体方案及细节\"><a href=\"#基于redis分布式锁的具体方案及细节\" class=\"headerlink\" title=\"基于redis分布式锁的具体方案及细节\"></a>基于redis分布式锁的具体方案及细节</h3>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fzfs9sj3xkj31hc0u07de.jpg\" alt=\"\"></p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>前几天突然接到任务说要实现一个分布式锁，由于之前有自己实现过一些demo，对各种分布式锁也都有一定的了解，<br>实现的时候会数量一些，但是毕竟是公司直接要拿来用的东西，反复斟酌后才把初期的方案定了下来。</p>\n<h3 id=\"常用的分布式锁简介\"><a href=\"#常用的分布式锁简介\" class=\"headerlink\" title=\"常用的分布式锁简介\"></a>常用的分布式锁简介</h3><p>基于redis的分布式锁</p>\n<ul>\n<li>使用setNX的方式</li>\n<li>直接使用redis官方的redission已经实现好的redLock</li>\n</ul>\n<p>基于zookeeper的分布式锁</p>\n<ul>\n<li>利用zookeeper的顺序临时节点，自旋比较自己的节点是否是节点里的最小值，来获得锁。</li>\n</ul>\n<p>基于etcd的分布式锁</p>\n<ul>\n<li>原理与zookeeper类似</li>\n</ul>\n<h3 id=\"基于redis分布式锁的具体方案及细节\"><a href=\"#基于redis分布式锁的具体方案及细节\" class=\"headerlink\" title=\"基于redis分布式锁的具体方案及细节\"></a>基于redis分布式锁的具体方案及细节</h3>"},{"title":"查快改慢B+树,改快查慢LSM树","date":"2019-01-23T03:47:24.000Z","_content":"![](https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020)\n## 前言\n>书本[**数据结构与算法**]()里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。\n\n---\n### 索引文件\n数据库的索引其实指的是**索引文件**，而B+树是我们索引文件**储存方式**。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：\n>1. index Key\n    - 首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤\n>2. index Filter\n    - 将满足的index filter条件的索引记录才去回表取出整行记录返回server层\n    - 不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 \n>3. Table Filter\n>   - 非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。\n---    \n### B+树\n#### 结构特征\n>1. 有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n2. B+树的所有数据，均存储在B+树的叶节点\n3. B+树叶节点的所有页面，通过双向链表链接起来\n####   优势\n>- 支持范围查找，所以需要有序 \n- 多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n- B+树的所有数据，均存储在B+树的叶节点  \n#### 缺点\n>- mysql的B+树会在大量的**随机io**的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。\n>- 每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 \n\n---\n### LSM树\nLSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。\n#### 结构特征\nLSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。\n#### 优势\n>- lsm数是基于 \n- 多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n- B+树的所有数据，均存储在B+树的叶节点  \n#### 缺点\n>- mysql的B+树会在大量的随机**io**的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。\n- 每次的页分裂会导致页面的空间利用率下降到50% \n#### 优化\n>- 布隆过滤器代替二分法查找\n\n","source":"_posts/查快改慢B-树-改快查慢LSM树.md","raw":"---\ntitle: '查快改慢B+树,改快查慢LSM树'\ndate: 2019-01-23 11:47:24\ntags: [数据结构, mysql, 索引]\ncategories: [mysql, 数据结构]\n---\n![](https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020)\n## 前言\n>书本[**数据结构与算法**]()里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。\n\n---\n### 索引文件\n数据库的索引其实指的是**索引文件**，而B+树是我们索引文件**储存方式**。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：\n>1. index Key\n    - 首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤\n>2. index Filter\n    - 将满足的index filter条件的索引记录才去回表取出整行记录返回server层\n    - 不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 \n>3. Table Filter\n>   - 非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。\n---    \n### B+树\n#### 结构特征\n>1. 有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n2. B+树的所有数据，均存储在B+树的叶节点\n3. B+树叶节点的所有页面，通过双向链表链接起来\n####   优势\n>- 支持范围查找，所以需要有序 \n- 多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n- B+树的所有数据，均存储在B+树的叶节点  \n#### 缺点\n>- mysql的B+树会在大量的**随机io**的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。\n>- 每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 \n\n---\n### LSM树\nLSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。\n#### 结构特征\nLSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。\n#### 优势\n>- lsm数是基于 \n- 多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数\n- B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；\n- B+树的所有数据，均存储在B+树的叶节点  \n#### 缺点\n>- mysql的B+树会在大量的随机**io**的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。\n- 每次的页分裂会导致页面的空间利用率下降到50% \n#### 优化\n>- 布隆过滤器代替二分法查找\n\n","slug":"查快改慢B-树-改快查慢LSM树","published":1,"updated":"2019-01-26T08:57:08.671Z","_id":"cjrirkddn001514tvdm1n69i7","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>书本<a href=\"\"><strong>数据结构与算法</strong></a>里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。</p>\n</blockquote>\n<hr>\n<h3 id=\"索引文件\"><a href=\"#索引文件\" class=\"headerlink\" title=\"索引文件\"></a>索引文件</h3><p>数据库的索引其实指的是<strong>索引文件</strong>，而B+树是我们索引文件<strong>储存方式</strong>。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：</p>\n<blockquote>\n<ol>\n<li>index Key<ul>\n<li>首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤</li>\n</ul>\n</li>\n<li>index Filter<ul>\n<li>将满足的index filter条件的索引记录才去回表取出整行记录返回server层</li>\n<li>不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 </li>\n</ul>\n</li>\n<li>Table Filter<ul>\n<li>非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><h4 id=\"结构特征\"><a href=\"#结构特征\" class=\"headerlink\" title=\"结构特征\"></a>结构特征</h4><blockquote>\n<ol>\n<li>有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点</li>\n<li>B+树叶节点的所有页面，通过双向链表链接起来</li>\n</ol>\n</blockquote>\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><blockquote>\n<ul>\n<li>支持范围查找，所以需要有序 </li>\n<li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。</li>\n<li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点  </li>\n</ul>\n</blockquote>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><blockquote>\n<ul>\n<li>mysql的B+树会在大量的<strong>随机io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。</li>\n<li>每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 </li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"LSM树\"><a href=\"#LSM树\" class=\"headerlink\" title=\"LSM树\"></a>LSM树</h3><p>LSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。</p>\n<h4 id=\"结构特征-1\"><a href=\"#结构特征-1\" class=\"headerlink\" title=\"结构特征\"></a>结构特征</h4><p>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</p>\n<h4 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h4><blockquote>\n<ul>\n<li>lsm数是基于 </li>\n<li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数</li>\n<li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点  </li>\n</ul>\n</blockquote>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><blockquote>\n<ul>\n<li>mysql的B+树会在大量的随机<strong>io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。</li>\n<li>每次的页分裂会导致页面的空间利用率下降到50% </li>\n</ul>\n</blockquote>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><blockquote>\n<ul>\n<li>布隆过滤器代替二分法查找</li>\n</ul>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"https://bing.ioliu.cn/photo/EyeFireworks_EN-AU4834024020\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>书本<a href=\"\"><strong>数据结构与算法</strong></a>里面就提到过B树在索引上的应用,而实际应用中一直有许多牛人又对这个数据结构持续做了多优，然这个结构一直有。</p>\n</blockquote>\n<hr>\n<h3 id=\"索引文件\"><a href=\"#索引文件\" class=\"headerlink\" title=\"索引文件\"></a>索引文件</h3><p>数据库的索引其实指的是<strong>索引文件</strong>，而B+树是我们索引文件<strong>储存方式</strong>。用于给存储引擎(这里指innodb)查找指定的数据，这里有必要温习一下数据库查根据where条件查找数据的过程，过程发生在storage engine层：</p>\n<blockquote>\n<ol>\n<li>index Key<ul>\n<li>首先将index key条件满足的索引记录区间确定，再索引上使用index filter进行过滤</li>\n</ul>\n</li>\n<li>index Filter<ul>\n<li>将满足的index filter条件的索引记录才去回表取出整行记录返回server层</li>\n<li>不满足index filter条件的索引记录丢弃，不回表、也不会返回server层 </li>\n</ul>\n</li>\n<li>Table Filter<ul>\n<li>非索引层面的数据过滤，server 层对返回的数据，使用table filter条件做最后的过滤。</li>\n</ul>\n</li>\n</ol>\n</blockquote>\n<hr>\n<h3 id=\"B-树\"><a href=\"#B-树\" class=\"headerlink\" title=\"B+树\"></a>B+树</h3><h4 id=\"结构特征\"><a href=\"#结构特征\" class=\"headerlink\" title=\"结构特征\"></a>结构特征</h4><blockquote>\n<ol>\n<li>有序,B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点</li>\n<li>B+树叶节点的所有页面，通过双向链表链接起来</li>\n</ol>\n</blockquote>\n<h4 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h4><blockquote>\n<ul>\n<li>支持范围查找，所以需要有序 </li>\n<li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数。</li>\n<li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点  </li>\n</ul>\n</blockquote>\n<h4 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><blockquote>\n<ul>\n<li>mysql的B+树会在大量的<strong>随机io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响整体查询修改效率。</li>\n<li>每次的页分裂会导致本页面的空间利用率下降，使得空间利用率向50%靠近。 </li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"LSM树\"><a href=\"#LSM树\" class=\"headerlink\" title=\"LSM树\"></a>LSM树</h3><p>LSM（Log-Structured Merge-Trees）与B+树相比，牺牲了部分读的性能来换取写的性能(通过批量写入)。 Hbase、LevelDB、rocksDB采用 LSM 树的结构。LSM可以快速建立索引。</p>\n<h4 id=\"结构特征-1\"><a href=\"#结构特征-1\" class=\"headerlink\" title=\"结构特征\"></a>结构特征</h4><p>LSM 是将一个大树拆分成N棵小树，先写到内存（无寻道问题，性能高），在内存中构建一颗有序小树（有序树），随着小树越来越大，内存的小树会flush到磁盘上。当读时，由于不知道数据在哪棵小树上，因此必须遍历（二分查找）所有的小树，但在每颗小树内部数据是有序的。</p>\n<h4 id=\"优势-1\"><a href=\"#优势-1\" class=\"headerlink\" title=\"优势\"></a>优势</h4><blockquote>\n<ul>\n<li>lsm数是基于 </li>\n<li>多叉树结构，降低了索引结构的深度，避免传统二叉树结构中绝大部分的随机访问操作，从而有效减少了磁盘磁头的寻道次数，降低了外存访问延迟对性能的影响本身的时间效率比较高，减少io次数</li>\n<li>B+树上层页面中的记录，存储的是下层页面中的最小值(Low Key)；</li>\n<li>B+树的所有数据，均存储在B+树的叶节点  </li>\n</ul>\n</blockquote>\n<h4 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h4><blockquote>\n<ul>\n<li>mysql的B+树会在大量的随机<strong>io</strong>的时候性能下降，特别是随机插入，有可能导致多次页分裂，影响查询效率。</li>\n<li>每次的页分裂会导致页面的空间利用率下降到50% </li>\n</ul>\n</blockquote>\n<h4 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h4><blockquote>\n<ul>\n<li>布隆过滤器代替二分法查找</li>\n</ul>\n</blockquote>\n"},{"title":"QuickSort Application in java","date":"2018-11-25T15:07:22.000Z","top":true,"_content":"![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言：\n**对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。\n而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.**\n\n>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n### 涉及的算法\n1. 插入排序(之前有用binary insertion,既二分法找到插入点后copy)\n2. 归并排序\n3. 快速排序\n    - 单轴双切分快排序(带等号)\n    - 双轴三切分快排\n4. 计数排序(用于数值范围小的情况，byte，short，char类型的时候)\n5. timSort(用于分析本身排序情况)\n\n### 大致思路\n尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：\n1. 小数据量：插入排序\n2. 适中：快速排序\n    - 结合插入排序\n    - 划分区间的时候，带等号使用单轴快排，否则双轴快排\n    - 递归调用自己 \n3. 大量：先分用timSort分析数据本身排序状况，\n    - 衡量指标：run(单调升降序长度)和runs(归并次数)\n    - 满足对应的常量要求就用归并，否则就用快排\n    \n### 具体代码(jdk1.8#对int[]排序)\n``` java\n    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left < QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n    \n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n    \n            for (int k = left; k < right; run[count] = k) {\n                if (a[k] < a[k + 1]) { // \n                    while (++k <= right && a[k - 1] <= a[k]);\n                } else if (a[k] > a[k + 1]) { // 降序\n                    while (++k <= right && a[k - 1] >= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n    \n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n            \n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n```  \n下面是**核心快排**(有点长)我梳理下：\n1. 小范围的用插入排序结束对应区间的排序，跳过\n2. 切分数组成6个区间（不是等分），中间有五个点，排好序\n3. 判断这五个点有没有相等的\n    - 有：双轴三切分\n      - 前后部分直接递归（转到第一步）\n      - 如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）\n    - 没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）\n      \n```` java\n    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length < INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i < right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai < a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left >= right) {\n                        return;\n                    }\n                } while (a[++left] >= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left <= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 < a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 < a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 < a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last < a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length >> 3) + (length >> 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) >>> 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] < a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] < a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] < a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] < a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t < a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n            \n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] < pivot1);\n            while (a[--great] > pivot2);\n            \n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  < pivot1  |  pivot1 <= && <= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k <= great; ) {\n                int ak = a[k];\n                if (ak < pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak > pivot2) { // Move a[k] to right part\n                    while (a[great] > pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] < pivot1) { // a[great] <= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 <= a[great] <= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less < e1 && e5 < great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 < && < pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k <= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] < pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 < a[great] < pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  < pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k <= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak < pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] > pivot - Move a[k] to right part\n                    while (a[great] > pivot) {\n                        --great;\n                    }\n                    if (a[great] < pivot) { // a[great] <= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n````\n我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。\n### 总结一下\n1. 数据量小(n<47)：使用插入排序\n2. 数据量大(n>286)：且符合归并排序的指标(run<33,runs<67)就用归并\n3. 别的时候都是使用快排递归解决\n\n   \n    ","source":"_posts/jdk的快速排序.md","raw":"title: 'QuickSort Application in java'\ndate: 2018-11-25 23:07:22\ntags: Algorithm\ncategories: [算法]\ntop: true\n---\n![I love it when a plan comes together.](http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg)\n### 前言：\n**对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。\n而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.**\n\n>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。本文需要对基本算法有一点了解才会容易看懂些，特别是快排。\n### 涉及的算法\n1. 插入排序(之前有用binary insertion,既二分法找到插入点后copy)\n2. 归并排序\n3. 快速排序\n    - 单轴双切分快排序(带等号)\n    - 双轴三切分快排\n4. 计数排序(用于数值范围小的情况，byte，short，char类型的时候)\n5. timSort(用于分析本身排序情况)\n\n### 大致思路\n尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：\n1. 小数据量：插入排序\n2. 适中：快速排序\n    - 结合插入排序\n    - 划分区间的时候，带等号使用单轴快排，否则双轴快排\n    - 递归调用自己 \n3. 大量：先分用timSort分析数据本身排序状况，\n    - 衡量指标：run(单调升降序长度)和runs(归并次数)\n    - 满足对应的常量要求就用归并，否则就用快排\n    \n### 具体代码(jdk1.8#对int[]排序)\n``` java\n    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left < QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n    \n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n    \n            for (int k = left; k < right; run[count] = k) {\n                if (a[k] < a[k + 1]) { // \n                    while (++k <= right && a[k - 1] <= a[k]);\n                } else if (a[k] > a[k + 1]) { // 降序\n                    while (++k <= right && a[k - 1] >= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n    \n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n            \n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n```  \n下面是**核心快排**(有点长)我梳理下：\n1. 小范围的用插入排序结束对应区间的排序，跳过\n2. 切分数组成6个区间（不是等分），中间有五个点，排好序\n3. 判断这五个点有没有相等的\n    - 有：双轴三切分\n      - 前后部分直接递归（转到第一步）\n      - 如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）\n    - 没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）\n      \n```` java\n    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length < INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i < right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai < a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left >= right) {\n                        return;\n                    }\n                } while (a[++left] >= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left <= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 < a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 < a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 < a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last < a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length >> 3) + (length >> 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) >>> 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] < a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] < a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] < a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] < a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t < a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n            \n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] < pivot1);\n            while (a[--great] > pivot2);\n            \n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  < pivot1  |  pivot1 <= && <= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k <= great; ) {\n                int ak = a[k];\n                if (ak < pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak > pivot2) { // Move a[k] to right part\n                    while (a[great] > pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] < pivot1) { // a[great] <= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 <= a[great] <= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less < e1 && e5 < great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 < && < pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k <= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] < pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 < a[great] < pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  < pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k <= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak < pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] > pivot - Move a[k] to right part\n                    while (a[great] > pivot) {\n                        --great;\n                    }\n                    if (a[great] < pivot) { // a[great] <= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n````\n我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。\n### 总结一下\n1. 数据量小(n<47)：使用插入排序\n2. 数据量大(n>286)：且符合归并排序的指标(run<33,runs<67)就用归并\n3. 别的时候都是使用快排递归解决\n\n   \n    ","slug":"jdk的快速排序","published":1,"updated":"2019-01-30T04:44:29.885Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkddo001614tv35b4mt1c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。<br>而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.</strong></p>\n<blockquote>\n<p>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。本文需要对基本算法有一点了解才会容易看懂些，特别是快排。</p>\n</blockquote>\n<h3 id=\"涉及的算法\"><a href=\"#涉及的算法\" class=\"headerlink\" title=\"涉及的算法\"></a>涉及的算法</h3><ol>\n<li>插入排序(之前有用binary insertion,既二分法找到插入点后copy)</li>\n<li>归并排序</li>\n<li>快速排序<ul>\n<li>单轴双切分快排序(带等号)</li>\n<li>双轴三切分快排</li>\n</ul>\n</li>\n<li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li>\n<li>timSort(用于分析本身排序情况)</li>\n</ol>\n<h3 id=\"大致思路\"><a href=\"#大致思路\" class=\"headerlink\" title=\"大致思路\"></a>大致思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：</p>\n<ol>\n<li>小数据量：插入排序</li>\n<li>适中：快速排序<ul>\n<li>结合插入排序</li>\n<li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li>\n<li>递归调用自己 </li>\n</ul>\n</li>\n<li>大量：先分用timSort分析数据本身排序状况，<ul>\n<li>衡量指标：run(单调升降序长度)和runs(归并次数)</li>\n<li>满足对应的常量要求就用归并，否则就用快排</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码-jdk1-8-对int-排序\"><a href=\"#具体代码-jdk1-8-对int-排序\" class=\"headerlink\" title=\"具体代码(jdk1.8#对int[]排序)\"></a>具体代码(jdk1.8#对int[]排序)</h3><pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span>\n                         <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> work<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> workBase<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> workLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 对于数据量少的直接使用快排</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>right <span class=\"token operator\">-</span> left <span class=\"token operator\">&lt;</span> QUICKSORT_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 286</span>\n                <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 基于插入，单双轴的快排见下面</span>\n                <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */</span>\n            <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> run <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span>MAX_RUN_COUNT <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> run<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">;</span> run<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// </span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 降序</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> lo <span class=\"token operator\">=</span> run<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> hi <span class=\"token operator\">=</span> k<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>lo <span class=\"token operator\">&lt;</span> <span class=\"token operator\">--</span>hi<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>lo<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>hi<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 相等</span>\n                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> MAX_RUN_LENGTH<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> right <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>m <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 等号多了直接将这里短丢到快排里面</span>\n                            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>count <span class=\"token operator\">==</span> MAX_RUN_COUNT<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">// 目前MAX_RUN_COUNT = 67</span>\n                    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 基于插入，单双轴的快排见下面</span>\n                    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长</span>\n            <span class=\"token comment\" spellcheck=\"true\">// ...... 归并</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 结束</span>\n        <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面是<strong>核心快排</strong>(有点长)我梳理下：</p>\n<ol>\n<li>小范围的用插入排序结束对应区间的排序，跳过</li>\n<li>切分数组成6个区间（不是等分），中间有五个点，排好序</li>\n<li>判断这五个点有没有相等的<ul>\n<li>有：双轴三切分<ul>\n<li>前后部分直接递归（转到第一步）</li>\n<li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li>\n</ul>\n</li>\n<li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li>\n</ul>\n</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\">    <span class=\"token comment\" spellcheck=\"true\">/**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> leftmost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 使用插入排序</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">&lt;</span> INSERTION_SORT_THRESHOLD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// INSERTION_SORT_THRESHOLD = 47</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 左边是否是最大</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>leftmost<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">// 普通的插入排序</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> left<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> right<span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> ai <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>ai <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ai<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 * 跳过最长升序\n                 */</span>\n                <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> a<span class=\"token punctuation\">[</span>left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">;</span> k <span class=\"token operator\">=</span> <span class=\"token operator\">++</span>left<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">&lt;</span> a2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a2 <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span> a1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a1<span class=\"token punctuation\">;</span>\n\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a2 <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>k <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a2<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> last <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>last <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    a<span class=\"token punctuation\">[</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                a<span class=\"token punctuation\">[</span>right <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1</span>\n        <span class=\"token keyword\">int</span> seventh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>length <span class=\"token operator\">>></span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 各个等分点</span>\n        <span class=\"token keyword\">int</span> e3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">+</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">>>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The midpoint</span>\n        <span class=\"token keyword\">int</span> e2 <span class=\"token operator\">=</span> e3 <span class=\"token operator\">-</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e1 <span class=\"token operator\">=</span> e2 <span class=\"token operator\">-</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e4 <span class=\"token operator\">=</span> e3 <span class=\"token operator\">+</span> seventh<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> e5 <span class=\"token operator\">=</span> e4 <span class=\"token operator\">+</span> seventh<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// 用插入排序将这些点快速排好序</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">int</span> t <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\" spellcheck=\"true\">// Pointers</span>\n        <span class=\"token keyword\">int</span> less  <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// The index of the first element of center part</span>\n        <span class=\"token keyword\">int</span> great <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// The index before the first element of right part</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>e1<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> a<span class=\"token punctuation\">[</span>e5<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 取第二和第四点为轴</span>\n            <span class=\"token keyword\">int</span> pivot1 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> pivot2 <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            a<span class=\"token punctuation\">[</span>e2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>e4<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 找到开始和结束向中间靠拢的合适下标</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 双轴三切分排序</span>\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  > pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */</span>\n            outer<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                    a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to right part</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>great<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt;= pivot2</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// pivot1 &lt;= a[great] &lt;= pivot2</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// Swap pivots into their final positions</span>\n            a<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less  <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>less  <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot1<span class=\"token punctuation\">;</span>\n            a<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> a<span class=\"token punctuation\">[</span>great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot2<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 前后切分，递归</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> less <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> leftmost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> great <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/* \n             * 如果中间长度大于 length 4/7 的长度\n             */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>less <span class=\"token operator\">&lt;</span> e1 <span class=\"token operator\">&amp;&amp;</span> e5 <span class=\"token operator\">&lt;</span> great<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n\n                <span class=\"token comment\" spellcheck=\"true\">/*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */</span>\n                outer<span class=\"token operator\">:</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to right part</span>\n                        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>great<span class=\"token operator\">--</span> <span class=\"token operator\">==</span> k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                                <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span>\n                            <span class=\"token punctuation\">}</span>\n                        <span class=\"token punctuation\">}</span>\n                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt; pivot2</span>\n                            a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                            a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot1<span class=\"token punctuation\">;</span>\n                            <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// pivot1 &lt; a[great] &lt; pivot2</span>\n                            a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token punctuation\">}</span>\n                        a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">// 中间递归</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> less<span class=\"token punctuation\">,</span> great<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 单轴快排</span>\n            <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>e3<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  &lt; pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> less<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;=</span> great<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">int</span> ak <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ak <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// Move a[k] to left part</span>\n                    a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[k] > pivot - Move a[k] to right part</span>\n                    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] &lt;= pivot</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        a<span class=\"token punctuation\">[</span>less<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                        <span class=\"token operator\">++</span>less<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// a[great] == pivot</span>\n                        a<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pivot<span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    a<span class=\"token punctuation\">[</span>great<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ak<span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">--</span>great<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\" spellcheck=\"true\">/*\n             * 双切分，递归\n             */</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> less <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> leftmost<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> great <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ol>\n<li>数据量小(n&lt;47)：使用插入排序</li>\n<li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li>\n<li>别的时候都是使用快排递归解决</li>\n</ol>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9gy1fxskn2tpksj31hc0u0guq.jpg\" alt=\"I love it when a plan comes together.\"></p>\n<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p><strong>对各种基本排序有了解的人都会知道，各种单一的排序都有他自己合适的使用场景，快速排序是综合表现最好的。<br>而实际应用中的排序可要考虑的实在是太多了，看jdk的排序是怎么做的.</strong></p>\n<blockquote>\n<p>java中的Arrays.Sort()方法是我们常用的排序方法，有心的人肯定点进去源码里面看过的，随着jdk的变化这个排序也有持续的变动，说明维护的人还是很愿意花精力在这个方法上的，代码对基本算法没有足够了解的人来说看起来还是很吃力的(我说的是以前的我)，花了点时间整理下这个算法。本文需要对基本算法有一点了解才会容易看懂些，特别是快排。</p>\n</blockquote>\n<h3 id=\"涉及的算法\"><a href=\"#涉及的算法\" class=\"headerlink\" title=\"涉及的算法\"></a>涉及的算法</h3><ol>\n<li>插入排序(之前有用binary insertion,既二分法找到插入点后copy)</li>\n<li>归并排序</li>\n<li>快速排序<ul>\n<li>单轴双切分快排序(带等号)</li>\n<li>双轴三切分快排</li>\n</ul>\n</li>\n<li>计数排序(用于数值范围小的情况，byte，short，char类型的时候)</li>\n<li>timSort(用于分析本身排序情况)</li>\n</ol>\n<h3 id=\"大致思路\"><a href=\"#大致思路\" class=\"headerlink\" title=\"大致思路\"></a>大致思路</h3><p>尽量发掘各自单一排序算法自己优势，当有合适条件的时候就使用对应的基本排序，并穿插一些实用的优化：</p>\n<ol>\n<li>小数据量：插入排序</li>\n<li>适中：快速排序<ul>\n<li>结合插入排序</li>\n<li>划分区间的时候，带等号使用单轴快排，否则双轴快排</li>\n<li>递归调用自己 </li>\n</ul>\n</li>\n<li>大量：先分用timSort分析数据本身排序状况，<ul>\n<li>衡量指标：run(单调升降序长度)和runs(归并次数)</li>\n<li>满足对应的常量要求就用归并，否则就用快排</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"具体代码-jdk1-8-对int-排序\"><a href=\"#具体代码-jdk1-8-对int-排序\" class=\"headerlink\" title=\"具体代码(jdk1.8#对int[]排序)\"></a>具体代码(jdk1.8#对int[]排序)</h3><pre><code class=\"java\">    /**\n     * 将给定区间数组排序，如果可以的话使用归并排序\n     */\n    static void sort(int[] a, int left, int right,\n                         int[] work, int workBase, int workLen) {\n            // 对于数据量少的直接使用快排\n            if (right - left &lt; QUICKSORT_THRESHOLD) {// 286\n                sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                return;\n            }\n\n            /*  timSort分析数据排序情况， run[i]是第i个run的开始\n             *  一个run是一节单调区间(升序或者降序)\n             */\n            int[] run = new int[MAX_RUN_COUNT + 1];\n            int count = 0; run[0] = left;\n\n            for (int k = left; k &lt; right; run[count] = k) {\n                if (a[k] &lt; a[k + 1]) { // \n                    while (++k &lt;= right &amp;&amp; a[k - 1] &lt;= a[k]);\n                } else if (a[k] &gt; a[k + 1]) { // 降序\n                    while (++k &lt;= right &amp;&amp; a[k - 1] &gt;= a[k]);\n                    for (int lo = run[count] - 1, hi = k; ++lo &lt; --hi; ) {\n                        int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                    }\n                } else { // 相等\n                    for (int m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - 1] == a[k]; ) {\n                        if (--m == 0) { // 等号多了直接将这里短丢到快排里面\n                            sort(a, left, right, true);\n                            return;\n                        }\n                    }\n                }\n\n                /* 如果数组不是高度结构化用快排代替归并(要合并的次数count太多了)\n                 */\n                if (++count == MAX_RUN_COUNT) {// 目前MAX_RUN_COUNT = 67\n                    sort(a, left, right, true); // 基于插入，单双轴的快排见下面\n                    return;\n                }\n            }\n\n            // 下面是基于O(n)辅助空间的非递归归并，贴进来总体太长\n            // ...... 归并\n            // 结束\n        }\n</code></pre>\n<p>下面是<strong>核心快排</strong>(有点长)我梳理下：</p>\n<ol>\n<li>小范围的用插入排序结束对应区间的排序，跳过</li>\n<li>切分数组成6个区间（不是等分），中间有五个点，排好序</li>\n<li>判断这五个点有没有相等的<ul>\n<li>有：双轴三切分<ul>\n<li>前后部分直接递归（转到第一步）</li>\n<li>如果中间的切分比较大的话，对他进行瘦身(把那些等于头尾的去掉后)再递归（转到第一步）</li>\n</ul>\n</li>\n<li>没有：单轴双切分，排除中间相等的点切分，后从方法开头递归（转到第一步）</li>\n</ul>\n</li>\n</ol>\n<pre><code class=\"java\">    /**\n     * Sorts the specified range of the array by Dual-Pivot Quicksort.\n     */\n    private static void sort(int[] a, int left, int right, boolean leftmost) {\n        int length = right - left + 1;\n\n        // 使用插入排序\n        if (length &lt; INSERTION_SORT_THRESHOLD) { // INSERTION_SORT_THRESHOLD = 47\n            // 左边是否是最大\n            if (leftmost) {\n                // 普通的插入排序\n                for (int i = left, j = i; i &lt; right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai &lt; a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n            } else {\n                /*\n                 * 跳过最长升序\n                 */\n                do {\n                    if (left &gt;= right) {\n                        return;\n                    }\n                } while (a[++left] &gt;= a[left - 1]);\n\n                /*\n                 * 这里也不是普通的的插入排序，\n                 * 使用的是双元素插入法更优。\n                 */\n                for (int k = left; ++left &lt;= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 &lt; a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 &lt; a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 &lt; a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last &lt; a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n            }\n            return;\n        }\n\n        // 快速得到接近七等分的长度(1/8 + 1/64 = 9/64)的长度 + 1\n        int seventh = (length &gt;&gt; 3) + (length &gt;&gt; 6) + 1;\n        // 各个等分点\n        int e3 = (left + right) &gt;&gt;&gt; 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // 用插入排序将这些点快速排好序\n        if (a[e2] &lt; a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] &lt; a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] &lt; a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] &lt; a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t &lt; a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n\n        // Pointers\n        int less  = left;  // The index of the first element of center part\n        int great = right; // The index before the first element of right part\n\n        if (a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]) {\n            // 取第二和第四点为轴\n            int pivot1 = a[e2];\n            int pivot2 = a[e4];\n\n            a[e2] = a[left];\n            a[e4] = a[right];\n\n            // 找到开始和结束向中间靠拢的合适下标\n            while (a[++less] &lt; pivot1);\n            while (a[--great] &gt; pivot2);\n\n            // 双轴三切分排序\n            /*\n             *   left part           center part                   right part\n             * +--------------------------------------------------------------+\n             * |  &lt; pivot1  |  pivot1 &lt;= &amp;&amp; &lt;= pivot2  |    ?    |  &gt; pivot2  |\n             * +--------------------------------------------------------------+\n             *               ^                          ^       ^\n             *               |                          |       |\n             *              less                        k     great\n             */\n            outer:\n            for (int k = less - 1; ++k &lt;= great; ) {\n                int ak = a[k];\n                if (ak &lt; pivot1) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else if (ak &gt; pivot2) { // Move a[k] to right part\n                    while (a[great] &gt; pivot2) {\n                        if (great-- == k) {\n                            break outer;\n                        }\n                    }\n                    if (a[great] &lt; pivot1) { // a[great] &lt;= pivot2\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // pivot1 &lt;= a[great] &lt;= pivot2\n                        a[k] = a[great];\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            // Swap pivots into their final positions\n            a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n            a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n            // 前后切分，递归\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /* \n             * 如果中间长度大于 length 4/7 的长度\n             */\n            if (less &lt; e1 &amp;&amp; e5 &lt; great) {\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 &lt; &amp;&amp; &lt; pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *             less                      k     great\n                 */\n                outer:\n                for (int k = less - 1; ++k &lt;= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] &lt; pivot2\n                            a[k] = a[less];\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 &lt; a[great] &lt; pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n\n            // 中间递归\n            sort(a, less, great, false);\n\n        } else { // 单轴快排\n            int pivot = a[e3];\n\n            /*\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  &lt; pivot  |   == pivot   |     ?    |  &gt; pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *             less            k      great\n             */\n            for (int k = less; k &lt;= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak &lt; pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] &gt; pivot - Move a[k] to right part\n                    while (a[great] &gt; pivot) {\n                        --great;\n                    }\n                    if (a[great] &lt; pivot) { // a[great] &lt;= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * 双切分，递归\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n</code></pre>\n<p>我承认需要要有点耐心才能看完，如果你认真看完并理解了，看别的代码那就是小菜一碟了 - -。</p>\n<h3 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h3><ol>\n<li>数据量小(n&lt;47)：使用插入排序</li>\n<li>数据量大(n&gt;286)：且符合归并排序的指标(run&lt;33,runs&lt;67)就用归并</li>\n<li>别的时候都是使用快排递归解决</li>\n</ol>\n"},{"title":"限流方案对比","date":"2019-01-21T10:57:53.000Z","top":true,"_content":"\n## 广为流传的接口限流方案\n### 漏斗桶\n如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。\n漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。\n在漏斗中没有水的时候，\n- 如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水\n- 如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中\n在漏斗中有水的时候\n- 出水口以最大速率出水\n- 如果漏斗未满，且有进水的话，那么这些水会积在漏斗中\n- 如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外\n![](http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg)\n### 桶令牌\n对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。\n令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；\n当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。\n#### RateLimiter 用法\n#### [google的guava包](https://github.com/google/guava)\n```` java\n    // 测试一下\n    public class Test {\n    \n        public static void main(String[] args) {\n            ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(100));\n            // 指定每秒放1个令牌\n            RateLimiter limiter = RateLimiter.create(1);\n            for (int i = 1; i < 50; i++) {\n                // 请求RateLimiter, 超过permits会被阻塞\n                //acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回\n                  Double acquire = null;\n                if (i == 1) {\n                    acquire = limiter.acquire(1);\n                } else if (i == 2) {\n                    acquire = limiter.acquire(10);\n                } else if (i == 3) {\n                    acquire = limiter.acquire(2);\n                } else if (i == 4) {\n                    acquire = limiter.acquire(20);\n                } else {\n                    acquire = limiter.acquire(2);\n                }\n                executorService.submit(new Task(\"获取令牌成功，获取耗：\" + acquire + \" 第 \" + i + \" 个任务执行\"));\n            }\n        }\n    }\n    class Task implements Runnable {\n        String str;\n        public Task(String str) {\n            this.str = str;\n        }\n        @Override\n      public void run() {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n            System.out.println(sdf.format(new Date()) + \" | \" + Thread.currentThread().getName() + str);\n        }\n    }\n````\nacquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回\n一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。\n### 令牌桶算法VS漏桶算法\n漏桶\n- 漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。\n令牌桶\n- 生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。\n\n## 还有那些简单易懂的?\n限流方案有很多他们有各自的使用场景，下面看两个有关key的限流\n### 环形窗口\n#### 实现\n- 用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间\n- 每次访问key或者接口的时候见时间戳放入环内，头结点碰到的节点都会充值\n####\n- 优势可以异步维护各自的key的访问量，而不用主线程每次去判断\n- \n### 定制窗口\n- 每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除\n- 每次请求先该key对应的节点数量少于指定的可以直接进入请求\n- 代码简单逻辑清晰容易实现","source":"_posts/限流方案对比.md","raw":"---\ntitle: 限流方案对比\ndate: 2019-01-21 18:57:53\ntags: 分布式\ncategories: [分布式]\ntop: true\n---\n\n## 广为流传的接口限流方案\n### 漏斗桶\n如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。\n漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。\n在漏斗中没有水的时候，\n- 如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水\n- 如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中\n在漏斗中有水的时候\n- 出水口以最大速率出水\n- 如果漏斗未满，且有进水的话，那么这些水会积在漏斗中\n- 如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外\n![](http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg)\n### 桶令牌\n对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。\n令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；\n当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。\n#### RateLimiter 用法\n#### [google的guava包](https://github.com/google/guava)\n```` java\n    // 测试一下\n    public class Test {\n    \n        public static void main(String[] args) {\n            ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(100));\n            // 指定每秒放1个令牌\n            RateLimiter limiter = RateLimiter.create(1);\n            for (int i = 1; i < 50; i++) {\n                // 请求RateLimiter, 超过permits会被阻塞\n                //acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回\n                  Double acquire = null;\n                if (i == 1) {\n                    acquire = limiter.acquire(1);\n                } else if (i == 2) {\n                    acquire = limiter.acquire(10);\n                } else if (i == 3) {\n                    acquire = limiter.acquire(2);\n                } else if (i == 4) {\n                    acquire = limiter.acquire(20);\n                } else {\n                    acquire = limiter.acquire(2);\n                }\n                executorService.submit(new Task(\"获取令牌成功，获取耗：\" + acquire + \" 第 \" + i + \" 个任务执行\"));\n            }\n        }\n    }\n    class Task implements Runnable {\n        String str;\n        public Task(String str) {\n            this.str = str;\n        }\n        @Override\n      public void run() {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n            System.out.println(sdf.format(new Date()) + \" | \" + Thread.currentThread().getName() + str);\n        }\n    }\n````\nacquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回\n一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。\n### 令牌桶算法VS漏桶算法\n漏桶\n- 漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。\n令牌桶\n- 生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。\n\n## 还有那些简单易懂的?\n限流方案有很多他们有各自的使用场景，下面看两个有关key的限流\n### 环形窗口\n#### 实现\n- 用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间\n- 每次访问key或者接口的时候见时间戳放入环内，头结点碰到的节点都会充值\n####\n- 优势可以异步维护各自的key的访问量，而不用主线程每次去判断\n- \n### 定制窗口\n- 每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除\n- 每次请求先该key对应的节点数量少于指定的可以直接进入请求\n- 代码简单逻辑清晰容易实现","slug":"限流方案对比","published":1,"updated":"2019-01-23T04:33:00.100Z","_id":"cjrirkdea001k14tv84lro8i0","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"广为流传的接口限流方案\"><a href=\"#广为流传的接口限流方案\" class=\"headerlink\" title=\"广为流传的接口限流方案\"></a>广为流传的接口限流方案</h2><h3 id=\"漏斗桶\"><a href=\"#漏斗桶\" class=\"headerlink\" title=\"漏斗桶\"></a>漏斗桶</h3><p>如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。<br>漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。<br>在漏斗中没有水的时候，</p>\n<ul>\n<li>如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水</li>\n<li>如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中<br>在漏斗中有水的时候</li>\n<li>出水口以最大速率出水</li>\n<li>如果漏斗未满，且有进水的话，那么这些水会积在漏斗中</li>\n<li><p>如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外<br><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg\" alt=\"\"></p>\n<h3 id=\"桶令牌\"><a href=\"#桶令牌\" class=\"headerlink\" title=\"桶令牌\"></a>桶令牌</h3><p>对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。<br>令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；<br>当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。</p>\n<h4 id=\"RateLimiter-用法\"><a href=\"#RateLimiter-用法\" class=\"headerlink\" title=\"RateLimiter 用法\"></a>RateLimiter 用法</h4><h4 id=\"google的guava包\"><a href=\"#google的guava包\" class=\"headerlink\" title=\"google的guava包\"></a><a href=\"https://github.com/google/guava\">google的guava包</a></h4><pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// 测试一下</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">{</span>\n\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          ListeningExecutorService executorService <span class=\"token operator\">=</span> MoreExecutors<span class=\"token punctuation\">.</span><span class=\"token function\">listeningDecorator</span><span class=\"token punctuation\">(</span>Executors<span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">// 指定每秒放1个令牌</span>\n          RateLimiter limiter <span class=\"token operator\">=</span> RateLimiter<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              <span class=\"token comment\" spellcheck=\"true\">// 请求RateLimiter, 超过permits会被阻塞</span>\n              <span class=\"token comment\" spellcheck=\"true\">//acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回</span>\n                Double acquire <span class=\"token operator\">=</span> null<span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  acquire <span class=\"token operator\">=</span> limiter<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  acquire <span class=\"token operator\">=</span> limiter<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  acquire <span class=\"token operator\">=</span> limiter<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  acquire <span class=\"token operator\">=</span> limiter<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                  acquire <span class=\"token operator\">=</span> limiter<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              executorService<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Task</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"获取令牌成功，获取耗：\"</span> <span class=\"token operator\">+</span> acquire <span class=\"token operator\">+</span> <span class=\"token string\">\" 第 \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\" 个任务执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Task</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n      String str<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">public</span> <span class=\"token function\">Task</span><span class=\"token punctuation\">(</span>String str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>str <span class=\"token operator\">=</span> str<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          SimpleDateFormat sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss.SSS\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" | \"</span> <span class=\"token operator\">+</span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<p>acquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回<br>一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。</p>\n<h3 id=\"令牌桶算法VS漏桶算法\"><a href=\"#令牌桶算法VS漏桶算法\" class=\"headerlink\" title=\"令牌桶算法VS漏桶算法\"></a>令牌桶算法VS漏桶算法</h3><p>漏桶</p>\n</li>\n<li>漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。<br>令牌桶</li>\n<li>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</li>\n</ul>\n<h2 id=\"还有那些简单易懂的\"><a href=\"#还有那些简单易懂的\" class=\"headerlink\" title=\"还有那些简单易懂的?\"></a>还有那些简单易懂的?</h2><p>限流方案有很多他们有各自的使用场景，下面看两个有关key的限流</p>\n<h3 id=\"环形窗口\"><a href=\"#环形窗口\" class=\"headerlink\" title=\"环形窗口\"></a>环形窗口</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间</li>\n<li>每次访问key或者接口的时候见时间戳放入环内，头结点碰到的节点都会充值<br>####</li>\n<li>优势可以异步维护各自的key的访问量，而不用主线程每次去判断</li>\n<li><h3 id=\"定制窗口\"><a href=\"#定制窗口\" class=\"headerlink\" title=\"定制窗口\"></a>定制窗口</h3></li>\n<li>每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除</li>\n<li>每次请求先该key对应的节点数量少于指定的可以直接进入请求</li>\n<li>代码简单逻辑清晰容易实现</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"广为流传的接口限流方案\"><a href=\"#广为流传的接口限流方案\" class=\"headerlink\" title=\"广为流传的接口限流方案\"></a>广为流传的接口限流方案</h2><h3 id=\"漏斗桶\"><a href=\"#漏斗桶\" class=\"headerlink\" title=\"漏斗桶\"></a>漏斗桶</h3><p>如果将请求比作是水，水来了都先放进桶里，并以限定的速度出水，桶满会溢出，体现为拒绝服务。<br>漏斗有一个进水口和一个出水口，出水口以一定速率出水，并且有一个最大出水速率。<br>在漏斗中没有水的时候，</p>\n<ul>\n<li>如果进水速率小于等于最大出水速率，那么，出水速率等于进水速率，不会积水</li>\n<li>如果进水速率大于最大出水速率，漏斗会以最大速率出水，此时，多余的水会积在漏斗中<br>在漏斗中有水的时候</li>\n<li>出水口以最大速率出水</li>\n<li>如果漏斗未满，且有进水的话，那么这些水会积在漏斗中</li>\n<li><p>如果漏斗已满，且有进水的话，那么这些水会溢出到漏斗之外<br><img src=\"http://ww1.sinaimg.cn/large/006Cwrd9ly1fy4wszq4y5j31hc0u0thv.jpg\" alt=\"\"></p>\n<h3 id=\"桶令牌\"><a href=\"#桶令牌\" class=\"headerlink\" title=\"桶令牌\"></a>桶令牌</h3><p>对于很多应用场景来说，其实除了要求能够限制数据的平均传输速率外，还要应该求允许某种程度的突发传输。那么漏桶算法就无法满足，令牌桶算法更为适合。<br>令牌桶算法的原理是系统以恒定的速率产生令牌，然后把令牌放到令牌桶中，令牌桶有一个容量，当令牌桶满了的时候，再向其中放令牌，那么多余的令牌会被丢弃；<br>当想要处理一个请求的时候，需要从令牌桶中取出一个令牌，如果此时令牌桶中没有令牌，那么则拒绝该请求。</p>\n<h4 id=\"RateLimiter-用法\"><a href=\"#RateLimiter-用法\" class=\"headerlink\" title=\"RateLimiter 用法\"></a>RateLimiter 用法</h4><h4 id=\"google的guava包\"><a href=\"#google的guava包\" class=\"headerlink\" title=\"google的guava包\"></a><a href=\"https://github.com/google/guava\">google的guava包</a></h4><pre><code class=\"java\">  // 测试一下\n  public class Test {\n\n      public static void main(String[] args) {\n          ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newFixedThreadPool(100));\n          // 指定每秒放1个令牌\n          RateLimiter limiter = RateLimiter.create(1);\n          for (int i = 1; i &lt; 50; i++) {\n              // 请求RateLimiter, 超过permits会被阻塞\n              //acquire(int permits)函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回\n                Double acquire = null;\n              if (i == 1) {\n                  acquire = limiter.acquire(1);\n              } else if (i == 2) {\n                  acquire = limiter.acquire(10);\n              } else if (i == 3) {\n                  acquire = limiter.acquire(2);\n              } else if (i == 4) {\n                  acquire = limiter.acquire(20);\n              } else {\n                  acquire = limiter.acquire(2);\n              }\n              executorService.submit(new Task(&quot;获取令牌成功，获取耗：&quot; + acquire + &quot; 第 &quot; + i + &quot; 个任务执行&quot;));\n          }\n      }\n  }\n  class Task implements Runnable {\n      String str;\n      public Task(String str) {\n          this.str = str;\n      }\n      @Override\n    public void run() {\n          SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss.SSS&quot;);\n          System.out.println(sdf.format(new Date()) + &quot; | &quot; + Thread.currentThread().getName() + str);\n      }\n  }\n</code></pre>\n<p>acquire函数主要用于获取permits个令牌，并计算需要等待多长时间，进而挂起等待，并将该值返回<br>一个RateLimiter主要定义了发放permits的速率。如果没有额外的配置，permits将以固定的速度分配，单位是每秒多少permits。默认情况下，Permits将会被稳定的平缓的发放。</p>\n<h3 id=\"令牌桶算法VS漏桶算法\"><a href=\"#令牌桶算法VS漏桶算法\" class=\"headerlink\" title=\"令牌桶算法VS漏桶算法\"></a>令牌桶算法VS漏桶算法</h3><p>漏桶</p>\n</li>\n<li>漏桶的出水速度是恒定的，那么意味着如果瞬时大流量的话，将有大部分请求被丢弃掉（也就是所谓的溢出）。<br>令牌桶</li>\n<li>生成令牌的速度是恒定的，而请求去拿令牌是没有速度限制的。这意味，面对瞬时大流量，该算法可以在短时间内请求拿到大量令牌，而且拿令牌的过程并不是消耗很大的事情。</li>\n</ul>\n<h2 id=\"还有那些简单易懂的\"><a href=\"#还有那些简单易懂的\" class=\"headerlink\" title=\"还有那些简单易懂的?\"></a>还有那些简单易懂的?</h2><p>限流方案有很多他们有各自的使用场景，下面看两个有关key的限流</p>\n<h3 id=\"环形窗口\"><a href=\"#环形窗口\" class=\"headerlink\" title=\"环形窗口\"></a>环形窗口</h3><h4 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h4><ul>\n<li>用定时任务维护一个环，头结点走完一周的时间是指定的窗口时间</li>\n<li>每次访问key或者接口的时候见时间戳放入环内，头结点碰到的节点都会充值<br>####</li>\n<li>优势可以异步维护各自的key的访问量，而不用主线程每次去判断</li>\n<li><h3 id=\"定制窗口\"><a href=\"#定制窗口\" class=\"headerlink\" title=\"定制窗口\"></a>定制窗口</h3></li>\n<li>每次请求记录时间戳，查看当前窗口内的节点数目，并将窗口外的节点删除</li>\n<li>每次请求先该key对应的节点数量少于指定的可以直接进入请求</li>\n<li>代码简单逻辑清晰容易实现</li>\n</ul>\n"},{"title":"位运算的那些骚操作","date":"2019-01-28T04:58:21.000Z","_content":"\n## 前言\n> 今天读到了大佬**[石杉]**的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。\n\n\n## 起因\n>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1]    \n输出: 1\n\n### 解答\n>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。\n好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。\n\n>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了\n\n```java\n  // 代码简单就不贴了\n```\n\n## 进阶\n>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1,3]    \n输出: 1,3\n\n### 解答\n> 如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？\n答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。\n我们利用不为0的那个位，将数组**按这位是否是1**(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。\n\n```java\npublic class findDiff{\n\tpublic static void main(String[] args) {\n      int[] arr = new int[50];\n      for (int i = 0; i < arr.length>>1; i++) {\n        arr[2*i] = i;\n        arr[2*i +1] = i;\n      }\n      // 修改其中一个，生成两个不同的数\n      arr[23] = 365;\n      method(arr);\n   }\n    \n  public static void method (int[] arr) {\n    int result = 0;\n    for (int i : arr) {\n      result ^= i;\n    }\n    int bitIndex = 0;\n    while (((result >> bitIndex) & 1) == 0){\n      bitIndex ++;\n    }\n    // 找到那个为1 的位\n    int left = 0, right = arr.length - 1;\n    int temp = arr[0];\n    while (left <= right){\n      int i = 1 & (temp >> bitIndex);\n      if (i == 1){\n        // 填进来，取后一位\n        arr[left] = temp;\n        temp = arr[++left];\n      } else { // 将当前的数交换出来\n        int temp1 = temp;\n        temp = arr[right];\n        arr[right] = temp1;\n        right --;\n      }\n    }\n    int leftNumber = 0;\n    for (int i = 0; i < left; i++) {\n      leftNumber ^= arr[i];\n    }\n    int rightNumber = 0;\n    for (int i = arr.length - 1; i >= left; i--) {\n      rightNumber ^= arr[i];\n    }\n    System.out.println(leftNumber+ \",\" + rightNumber);\n  }\n}\n```\n\n## 继续推广\n>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1,3,5]    \n输出: 1,3，5\n\n### 解答\n> 如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。\n答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。\n\n\n\n\n","source":"_posts/位运算的那些骚操作.md","raw":"---\ntitle: 位运算的那些骚操作\ndate: 2019-01-28 12:58:21\ntags: [算法, leetcode]\ncategories: [算法]\n---\n\n## 前言\n> 今天读到了大佬**[石杉]**的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。\n\n\n## 起因\n>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1]    \n输出: 1\n\n### 解答\n>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。\n好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。\n\n>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了\n\n```java\n  // 代码简单就不贴了\n```\n\n## 进阶\n>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1,3]    \n输出: 1,3\n\n### 解答\n> 如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？\n答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。\n我们利用不为0的那个位，将数组**按这位是否是1**(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。\n\n```java\npublic class findDiff{\n\tpublic static void main(String[] args) {\n      int[] arr = new int[50];\n      for (int i = 0; i < arr.length>>1; i++) {\n        arr[2*i] = i;\n        arr[2*i +1] = i;\n      }\n      // 修改其中一个，生成两个不同的数\n      arr[23] = 365;\n      method(arr);\n   }\n    \n  public static void method (int[] arr) {\n    int result = 0;\n    for (int i : arr) {\n      result ^= i;\n    }\n    int bitIndex = 0;\n    while (((result >> bitIndex) & 1) == 0){\n      bitIndex ++;\n    }\n    // 找到那个为1 的位\n    int left = 0, right = arr.length - 1;\n    int temp = arr[0];\n    while (left <= right){\n      int i = 1 & (temp >> bitIndex);\n      if (i == 1){\n        // 填进来，取后一位\n        arr[left] = temp;\n        temp = arr[++left];\n      } else { // 将当前的数交换出来\n        int temp1 = temp;\n        temp = arr[right];\n        arr[right] = temp1;\n        right --;\n      }\n    }\n    int leftNumber = 0;\n    for (int i = 0; i < left; i++) {\n      leftNumber ^= arr[i];\n    }\n    int rightNumber = 0;\n    for (int i = arr.length - 1; i >= left; i--) {\n      rightNumber ^= arr[i];\n    }\n    System.out.println(leftNumber+ \",\" + rightNumber);\n  }\n}\n```\n\n## 继续推广\n>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).\n示例:\n输入: [2,2,1,3,5]    \n输出: 1,3，5\n\n### 解答\n> 如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。\n答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。\n\n\n\n\n","slug":"位运算的那些骚操作","published":1,"updated":"2019-01-30T04:59:34.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjrirkdeb001l14tvzvce1sik","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"\\assets\\css\\APlayer.min.css\"><script src=\"\\assets\\js\\APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>今天读到了大佬<strong>[石杉]</strong>的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><blockquote>\n<p>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1]<br>输出: 1</p>\n</blockquote>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。<br>好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。</p>\n</blockquote>\n<blockquote>\n<p>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\">  <span class=\"token comment\" spellcheck=\"true\">// 代码简单就不贴了</span>\n</code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><blockquote>\n<p>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3]<br>输出: 1,3</p>\n</blockquote>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。<br>我们利用不为0的那个位，将数组<strong>按这位是否是1</strong>(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。</p>\n</blockquote>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">findDiff</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">50</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>i <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 修改其中一个，生成两个不同的数</span>\n      arr<span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">365</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">^=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> bitIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">>></span> bitIndex<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      bitIndex <span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 找到那个为1 的位</span>\n    <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> right <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">&lt;=</span> right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">>></span> bitIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 填进来，取后一位</span>\n        arr<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 将当前的数交换出来</span>\n        <span class=\"token keyword\">int</span> temp1 <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n        temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        arr<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp1<span class=\"token punctuation\">;</span>\n        right <span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> leftNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      leftNumber <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">int</span> rightNumber <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> left<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      rightNumber <span class=\"token operator\">^=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>leftNumber<span class=\"token operator\">+</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> rightNumber<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"继续推广\"><a href=\"#继续推广\" class=\"headerlink\" title=\"继续推广\"></a>继续推广</h2><blockquote>\n<p>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3,5]<br>输出: 1,3，5</p>\n</blockquote>\n<h3 id=\"解答-2\"><a href=\"#解答-2\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>今天读到了大佬<strong>[石杉]</strong>的一篇有关算法的文章，决定记录一下这种花操作，虽然之前刷leetCode看到过这样的操作，但是还是容易忘记，所以在这里整理下。后面也思考了有关这个算法的一些扩展。</p>\n</blockquote>\n<h2 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h2><blockquote>\n<p>一道说简单又不那么好对付的算法题：数组里有一个不同的数，剩余里都是两两相同，找出这个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1]<br>输出: 1</p>\n</blockquote>\n<h3 id=\"解答\"><a href=\"#解答\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>咋一看其实是很简单的，随便用个map，或者排序一下就可以，但是空间复杂度为O(1)的,这就不能用map了。时间复杂度是O(n),所以不能排序。<br>好像把我们的所有方法都赶尽杀绝了，突然脑袋一片空白。。。</p>\n</blockquote>\n<blockquote>\n<p>还是直接说答案吧，技巧是使用未操作。每个数异或自己，为零。剩余的就是那个单独的数了</p>\n</blockquote>\n<pre><code class=\"java\">  // 代码简单就不贴了\n</code></pre>\n<h2 id=\"进阶\"><a href=\"#进阶\" class=\"headerlink\" title=\"进阶\"></a>进阶</h2><blockquote>\n<p>数组里有两个不同的数，剩余里都是两两相同，找出这两个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3]<br>输出: 1,3</p>\n</blockquote>\n<h3 id=\"解答-1\"><a href=\"#解答-1\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>如果还是使用刚刚的方法好像是没戏了，因为最后只留下了一个数。那怎么解答啊？<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。<br>我们利用不为0的那个位，将数组<strong>按这位是否是1</strong>(比如是第三位)，拆分开来。那么就形成了两个题目1的情况了，得解。</p>\n</blockquote>\n<pre><code class=\"java\">public class findDiff{\n    public static void main(String[] args) {\n      int[] arr = new int[50];\n      for (int i = 0; i &lt; arr.length&gt;&gt;1; i++) {\n        arr[2*i] = i;\n        arr[2*i +1] = i;\n      }\n      // 修改其中一个，生成两个不同的数\n      arr[23] = 365;\n      method(arr);\n   }\n\n  public static void method (int[] arr) {\n    int result = 0;\n    for (int i : arr) {\n      result ^= i;\n    }\n    int bitIndex = 0;\n    while (((result &gt;&gt; bitIndex) &amp; 1) == 0){\n      bitIndex ++;\n    }\n    // 找到那个为1 的位\n    int left = 0, right = arr.length - 1;\n    int temp = arr[0];\n    while (left &lt;= right){\n      int i = 1 &amp; (temp &gt;&gt; bitIndex);\n      if (i == 1){\n        // 填进来，取后一位\n        arr[left] = temp;\n        temp = arr[++left];\n      } else { // 将当前的数交换出来\n        int temp1 = temp;\n        temp = arr[right];\n        arr[right] = temp1;\n        right --;\n      }\n    }\n    int leftNumber = 0;\n    for (int i = 0; i &lt; left; i++) {\n      leftNumber ^= arr[i];\n    }\n    int rightNumber = 0;\n    for (int i = arr.length - 1; i &gt;= left; i--) {\n      rightNumber ^= arr[i];\n    }\n    System.out.println(leftNumber+ &quot;,&quot; + rightNumber);\n  }\n}\n</code></pre>\n<h2 id=\"继续推广\"><a href=\"#继续推广\" class=\"headerlink\" title=\"继续推广\"></a>继续推广</h2><blockquote>\n<p>数组里有3个不同的数，剩余里都是两两相同，找出这三个数，时间复杂度O(n),空间复杂度常数O(1).<br>示例:<br>输入: [2,2,1,3,5]<br>输出: 1,3，5</p>\n</blockquote>\n<h3 id=\"解答-2\"><a href=\"#解答-2\" class=\"headerlink\" title=\"解答\"></a>解答</h3><blockquote>\n<p>如果还是使用刚刚的2方法好像是没戏了，因为两个数的抑或可能覆盖另外一个数的值。那有要怎么办啊。<br>答案的起点其实也是在这里，最后剩下的这个数也是有信息的，那就是这两个数异或一定不为0，抓住这个信息。</p>\n</blockquote>\n"},{"layout":"读designing","title":"Designing Data-Intensive Application","date":"2019-02-13T08:57:48.000Z","_content":"\n## 第一部分\n> 互联网做得太棒了，以至于大多数人将它看作像太平洋这样的自然资源，而不是什么人工产物。上一次出现这种大规模且无差错的技术， 你还记得是什么时候吗？\n——阿兰·凯在接受Dobb博士杂志采访时说（2012年）\n\n现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。因此CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。\n\n### 描述性能\n一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：  \n- 增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？\n- 增加负载参数并希望保持性能不变时，需要增加多少系统资源？\n这两个问题都需要性能数据，所以让我们简单地看一下如何描述系统性能。\n​ 对于Hadoop这样的批处理系统，通常关心的是**吞吐量**（throughput），即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间iii。对于在线系统，通常更重要的是服务的**响应时间**（response time），即客户端发送请求到接收响应之间的时间。\n\n​ 即使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将**响应时间**视为一个可以测量的**数值分布**（distribution），**而不是单个数值**。","source":"_posts/Application.md","raw":"---\nlayout: 读designing\ntitle: Designing Data-Intensive Application\ndate: 2019-02-13 16:57:48\ntags: 阅读\ncategories: [设计思想]\n---\n\n## 第一部分\n> 互联网做得太棒了，以至于大多数人将它看作像太平洋这样的自然资源，而不是什么人工产物。上一次出现这种大规模且无差错的技术， 你还记得是什么时候吗？\n——阿兰·凯在接受Dobb博士杂志采访时说（2012年）\n\n现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。因此CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。\n\n### 描述性能\n一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：  \n- 增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？\n- 增加负载参数并希望保持性能不变时，需要增加多少系统资源？\n这两个问题都需要性能数据，所以让我们简单地看一下如何描述系统性能。\n​ 对于Hadoop这样的批处理系统，通常关心的是**吞吐量**（throughput），即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间iii。对于在线系统，通常更重要的是服务的**响应时间**（response time），即客户端发送请求到接收响应之间的时间。\n\n​ 即使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将**响应时间**视为一个可以测量的**数值分布**（distribution），**而不是单个数值**。","slug":"Application","published":1,"updated":"2019-02-15T01:37:47.447Z","comments":1,"photos":[],"link":"","_id":"cjs5e8qa40000pwz9yw7ll8lv","content":"<h2 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h2><blockquote>\n<p>互联网做得太棒了，以至于大多数人将它看作像太平洋这样的自然资源，而不是什么人工产物。上一次出现这种大规模且无差错的技术， 你还记得是什么时候吗？<br>——阿兰·凯在接受Dobb博士杂志采访时说（2012年）</p>\n</blockquote>\n<p>现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。因此CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。</p>\n<h3 id=\"描述性能\"><a href=\"#描述性能\" class=\"headerlink\" title=\"描述性能\"></a>描述性能</h3><p>一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：  </p>\n<ul>\n<li>增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？</li>\n<li>增加负载参数并希望保持性能不变时，需要增加多少系统资源？<br>这两个问题都需要性能数据，所以让我们简单地看一下如何描述系统性能。<br>​ 对于Hadoop这样的批处理系统，通常关心的是<strong>吞吐量</strong>（throughput），即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间iii。对于在线系统，通常更重要的是服务的<strong>响应时间</strong>（response time），即客户端发送请求到接收响应之间的时间。</li>\n</ul>\n<p>​ 即使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将<strong>响应时间</strong>视为一个可以测量的<strong>数值分布</strong>（distribution），<strong>而不是单个数值</strong>。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"tianqiyu","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"https://tianqiyu119.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"ttps://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h2><blockquote>\n<p>互联网做得太棒了，以至于大多数人将它看作像太平洋这样的自然资源，而不是什么人工产物。上一次出现这种大规模且无差错的技术， 你还记得是什么时候吗？<br>——阿兰·凯在接受Dobb博士杂志采访时说（2012年）</p>\n</blockquote>\n<p>现今很多应用程序都是 数据密集型（data-intensive） 的，而非 计算密集型（compute-intensive） 的。因此CPU很少成为这类应用的瓶颈，更大的问题通常来自数据量、数据复杂性、以及数据的变更速度。</p>\n<h3 id=\"描述性能\"><a href=\"#描述性能\" class=\"headerlink\" title=\"描述性能\"></a>描述性能</h3><p>一旦系统的负载被描述好，就可以研究当负载增加会发生什么。我们可以从两种角度来看：  </p>\n<ul>\n<li>增加负载参数并保持系统资源（CPU、内存、网络带宽等）不变时，系统性能将受到什么影响？</li>\n<li>增加负载参数并希望保持性能不变时，需要增加多少系统资源？<br>这两个问题都需要性能数据，所以让我们简单地看一下如何描述系统性能。<br>​ 对于Hadoop这样的批处理系统，通常关心的是<strong>吞吐量</strong>（throughput），即每秒可以处理的记录数量，或者在特定规模数据集上运行作业的总时间iii。对于在线系统，通常更重要的是服务的<strong>响应时间</strong>（response time），即客户端发送请求到接收响应之间的时间。</li>\n</ul>\n<p>​ 即使不断重复发送同样的请求，每次得到的响应时间也都会略有不同。现实世界的系统会处理各式各样的请求，响应时间可能会有很大差异。因此我们需要将<strong>响应时间</strong>视为一个可以测量的<strong>数值分布</strong>（distribution），<strong>而不是单个数值</strong>。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjrirkd2l000414tv2xos12gh","category_id":"cjrirkdbi000614tvhgi024bq","_id":"cjrirkdcf000f14tvqk03io24"},{"post_id":"cjrirkdbf000514tvjptda1rn","category_id":"cjrirkdbq000b14tvdf00dd4l","_id":"cjrirkdcj000k14tv2pwq1l9m"},{"post_id":"cjrirkdbk000814tvvi8bubmh","category_id":"cjrirkdcg000g14tvvum8odd5","_id":"cjrirkdco000p14tvgvff5v8q"},{"post_id":"cjrirkdbm000914tvovmd53ph","category_id":"cjrirkdcg000g14tvvum8odd5","_id":"cjrirkdcq000t14tvj0vug9wc"},{"post_id":"cjrirkdbo000a14tv8hasals6","category_id":"cjrirkdcg000g14tvvum8odd5","_id":"cjrirkdct000x14tvc5gx7gb3"},{"post_id":"cjrirkdbs000d14tvnc7kmloh","category_id":"cjrirkdcg000g14tvvum8odd5","_id":"cjrirkdcw001014tvxshrml3l"},{"post_id":"cjrirkdc8000e14tv6jqqetap","category_id":"cjrirkdct000w14tvnx0o3ugm","_id":"cjrirkdcx001314tvyjz5jalp"},{"post_id":"cjrirkddo001614tv35b4mt1c","category_id":"cjrirkddq001914tv976r63qq","_id":"cjrirkddt001f14tvv508238j"},{"post_id":"cjrirkddn001514tvdm1n69i7","category_id":"cjrirkddp001714tvk182mjfc","_id":"cjrirkddu001i14tvhiyi62lq"},{"post_id":"cjrirkddn001514tvdm1n69i7","category_id":"cjrirkddr001b14tvwsv374td","_id":"cjrirkddu001j14tvwr2m819n"},{"post_id":"cjrirkdea001k14tv84lro8i0","category_id":"cjrirkdct000w14tvnx0o3ugm","_id":"cjrirkdee001o14tvt4s3actb"},{"post_id":"cjrirkdeb001l14tvzvce1sik","category_id":"cjrirkddq001914tv976r63qq","_id":"cjrirkdee001p14tv2m3kpx3y"},{"post_id":"cjs5e8qa40000pwz9yw7ll8lv","category_id":"cjs5e8qaa0001pwz97m30xn2p","_id":"cjs5e8qae0004pwz9bk3rsbvd"}],"PostTag":[{"post_id":"cjrirkd2l000414tv2xos12gh","tag_id":"cjrirkdbk000714tvm5c19zay","_id":"cjrirkdch000i14tvmpj157al"},{"post_id":"cjrirkd2l000414tv2xos12gh","tag_id":"cjrirkdbr000c14tv72m75cw4","_id":"cjrirkdcj000j14tvvlpt3o0w"},{"post_id":"cjrirkdbf000514tvjptda1rn","tag_id":"cjrirkdcg000h14tvb1or3lw4","_id":"cjrirkdcm000n14tv844k7g8z"},{"post_id":"cjrirkdbk000814tvvi8bubmh","tag_id":"cjrirkdck000m14tvpeddfyd3","_id":"cjrirkdcp000r14tv5t55hwyu"},{"post_id":"cjrirkdbm000914tvovmd53ph","tag_id":"cjrirkdck000m14tvpeddfyd3","_id":"cjrirkdcs000v14tvfoabstag"},{"post_id":"cjrirkdbo000a14tv8hasals6","tag_id":"cjrirkdck000m14tvpeddfyd3","_id":"cjrirkdcv000z14tv91zitvwa"},{"post_id":"cjrirkdbs000d14tvnc7kmloh","tag_id":"cjrirkdck000m14tvpeddfyd3","_id":"cjrirkdcw001214tvhiiy3w0n"},{"post_id":"cjrirkdc8000e14tv6jqqetap","tag_id":"cjrirkdcw001114tvugwc514q","_id":"cjrirkdcy001414tvv0v6dypm"},{"post_id":"cjrirkddn001514tvdm1n69i7","tag_id":"cjrirkdcg000h14tvb1or3lw4","_id":"cjrirkdds001d14tv77ozkc77"},{"post_id":"cjrirkddn001514tvdm1n69i7","tag_id":"cjrirkddp001814tvui1wja3t","_id":"cjrirkddt001e14tv9y7wtf1i"},{"post_id":"cjrirkddn001514tvdm1n69i7","tag_id":"cjrirkddq001a14tvd9yap179","_id":"cjrirkddt001g14tvsaxskykd"},{"post_id":"cjrirkddo001614tv35b4mt1c","tag_id":"cjrirkdds001c14tvmfcrbs0i","_id":"cjrirkddu001h14tv5p6thyf4"},{"post_id":"cjrirkdea001k14tv84lro8i0","tag_id":"cjrirkdcw001114tvugwc514q","_id":"cjrirkded001m14tv0oqzukh0"},{"post_id":"cjrirkdeb001l14tvzvce1sik","tag_id":"cjrirkdee001n14tvdwj0rm8o","_id":"cjrirkdeg001r14tvukmarvhy"},{"post_id":"cjrirkdeb001l14tvzvce1sik","tag_id":"cjrirkdef001q14tvhv70b6mf","_id":"cjrirkdeg001s14tv4pgtspiv"},{"post_id":"cjs5e8qa40000pwz9yw7ll8lv","tag_id":"cjs5e8qad0002pwz9cj59l5lq","_id":"cjs5e8qae0003pwz99ny4t2ze"}],"Tag":[{"name":"源码","_id":"cjrirkdbk000714tvm5c19zay"},{"name":"springMVC","_id":"cjrirkdbr000c14tv72m75cw4"},{"name":"数据结构","_id":"cjrirkdcg000h14tvb1or3lw4"},{"name":"设计模式","_id":"cjrirkdck000m14tvpeddfyd3"},{"name":"分布式","_id":"cjrirkdcw001114tvugwc514q"},{"name":"mysql","_id":"cjrirkddp001814tvui1wja3t"},{"name":"索引","_id":"cjrirkddq001a14tvd9yap179"},{"name":"Algorithm","_id":"cjrirkdds001c14tvmfcrbs0i"},{"name":"算法","_id":"cjrirkdee001n14tvdwj0rm8o"},{"name":"leetcode","_id":"cjrirkdef001q14tvhv70b6mf"},{"name":"阅读","_id":"cjs5e8qad0002pwz9cj59l5lq"}]}}